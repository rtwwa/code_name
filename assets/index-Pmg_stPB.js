import{h as W}from"./kaplay-CpR_OpMc.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))o(t);new MutationObserver(t=>{for(const c of t)if(c.type==="childList")for(const u of c.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&o(u)}).observe(document,{childList:!0,subtree:!0});function r(t){const c={};return t.integrity&&(c.integrity=t.integrity),t.referrerPolicy&&(c.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?c.credentials="include":t.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function o(t){if(t.ep)return;t.ep=!0;const c=r(t);fetch(t.href,c)}})();function F(a){const e=document.querySelector("canvas"),r=window.innerWidth,o=window.innerHeight,t=Math.floor(r/a.width),c=Math.floor(o/a.height),u=Math.max(1,Math.min(t,c));e.style.width=a.width*u+"px",e.style.height=a.height*u+"px",e.style.imageRendering="pixelated",e.style.position="absolute",e.style.top="50%",e.style.left="50%",e.style.transform="translate(-50%, -50%)"}function G(){const a=document.querySelector("canvas");a.requestFullscreen?a.requestFullscreen():a.webkitRequestFullscreen&&a.webkitRequestFullscreen()}function N(a){window.addEventListener("resize",F(a)),window.addEventListener("load",F(a)),document.addEventListener("keydown",e=>{e.key==="f"&&G()})}const j=800,$=800,U={foreground:[237,242,226]},h={background:[34,42,61],foreground:[237,242,226]};function E(a){h.foreground=a,get("*").map(r=>{r.color&&(r.color=Color.fromArray(a)),r.outline&&(r.outline.color=Color.fromArray(a))})}const A={kaplayInstance:null,currentScene:null,sceneData:{},init(a){this.kaplayInstance=a},addScene(a,e){if(!this.kaplayInstance){console.error("Kaplay instance не инициализирован");return}this.kaplayInstance.scene(a,()=>{const r=e();return this.sceneData[a]=r,r})},startScene(a){if(!this.kaplayInstance){console.error("Kaplay instance не инициализирован");return}this.currentScene=a,this.kaplayInstance.go(a)},getCurrentSceneData(){return this.sceneData[this.currentScene]}};async function J(){await loadSprite("spider","./sprites/spider.png")}const T={size:10,speed:200,moveInterval:1.5,damage:1,aggroRange:200,travelRange:200,hp:1,deathPartsCount:50,deathPartsSpeed:[300,10],deathPartsLife:.4,deathShake:2,deathScore:10};function Q(a,e,r,o={}){const{size:t=T.size,speed:c=T.speed,moveInterval:u=T.moveInterval,damage:g=T.damage,aggroRange:v=T.aggroRange,travelRange:d=T.travelRange,hp:m=T.hp,deathPartsCount:S=T.deathPartsCount,deathPartsSpeed:w=T.deathPartsSpeed,deathPartsLife:b=T.deathPartsLife,deathShake:i=T.deathShake,deathScore:s=T.deathScore}=o;let n=a;const l=add([sprite("spider"),pos(a),color(h.foreground),area(),body(),health(m),anchor("center"),"enemy","spider",{damage:g,speed:c,size:t}]);function f(){const y=get("player")[0];if(y){const P=l.pos.dist(y.pos);if(P<v&&P>y.width+t){n=vec2(y.pos.x,y.pos.y),l.moveTo(n,c);return}}n=p(),n.dist(e)>r-t&&(n=center())}function p(){return vec2(l.pos.x+rand(-d,d),l.pos.y+rand(-d,d))}function x(){l.moveTo(n,c)}return loop(u,()=>{f()}),l.onUpdate(()=>{x()}),l.onHurt(()=>{if(l.hp()<=0)return;const y=add([pos(l.pos),particles({max:S,speed:w,angle:[0,360],angularVelocity:[45,90],lifeTime:[b,b],colors:[rgb(h.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:b,rate:0,direction:0,spread:180}),timer()]);y.emit(S/3),shake(Math.max(i/3,1)),y.wait(b*2,()=>{destroy(y)})}),l.onDeath(()=>{const y=add([pos(l.pos),particles({max:S,speed:w,angle:[0,360],angularVelocity:[45,90],lifeTime:[b,b],colors:[rgb(h.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:b,rate:0,direction:0,spread:180}),timer()]);y.emit(S),shake(i),destroy(l),y.wait(b*2,()=>{destroy(y)}),get("gameManager")[0].addScore(s)}),l}function Z(){onCollide("spider","player",(a,e)=>{e.hurt(a.damage)})}async function ee(){await loadSprite("button","./sprites/button.png"),await loadSprite("dropArea","./sprites/dropArea.png"),await loadSprite("turretAR","./sprites/turretAR.png"),await loadSprite("turretMISS","./sprites/turretMISS.png"),await loadSprite("turretBT","./sprites/turretBT.png"),await loadSprite("turretART","./sprites/turretART.png"),await loadSprite("deathParticlies","./sprites/dust.png")}const _={bulletCount:12,bulletSpeed:150,hp:1,damage:1,shootInterval:2,bulletSize:6,deathPartsCount:150,deathPartsSpeed:[300,10],deathPartsLife:.4,deathShake:3,deathScore:20};function te(a={}){const e=add([{..._},"sTurretAR"]);return e.spawn=(r,o={})=>{const{bulletCount:t=e.bulletCount,bulletSpeed:c=e.bulletSpeed,hp:u=e.hp,damage:g=e.damage,shootInterval:v=e.shootInterval,bulletSize:d=e.bulletSize,deathPartsCount:m=e.deathPartsCount,deathPartsSpeed:S=e.deathPartsSpeed,deathPartsLife:w=e.deathPartsLife,deathShake:b=e.deathShake,deathScore:i=e.deathScore}=o,s=add([sprite("turretAR"),pos(r),area(),body(),health(u),color(h.foreground),anchor("center"),"enemy",{bulletCount:t,bulletSpeed:c,damage:g,shootInterval:v}]);function n(){for(let f=0;f<s.bulletCount;f++){const p=f/s.bulletCount*Math.PI*2,x=vec2(Math.cos(p),Math.sin(p));add([circle(d),pos(s.pos),color(h.foreground),area(),"bullet",{dir:x,speed:s.bulletSpeed,damage:s.damage}])}}const l=loop(s.shootInterval,n);return s.onHurt(()=>{if(s.hp()<=0)return;const f=add([pos(s.pos),particles({max:m,speed:S,angle:[0,360],angularVelocity:[45,90],lifeTime:[w,w],colors:[rgb(h.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:w,rate:0,direction:0,spread:180}),timer()]);f.emit(m/3),shake(Math.max(b/3,1)),f.wait(w*2,()=>destroy(f))}),s.onDestroy(()=>{l.cancel(),destroy(s)}),s.onDeath(()=>{const f=add([pos(s.pos),particles({max:m,speed:S,angle:[0,360],angularVelocity:[45,90],lifeTime:[w,w],colors:[rgb(h.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:w,rate:0,direction:0,spread:180}),timer()]);f.emit(m),shake(b),l.cancel(),destroy(s),f.wait(w*2,()=>destroy(f)),get("gameManager")[0].addScore(i)}),s},e}function oe(a){onUpdate("bullet",e=>{e.move(e.dir.scale(e.speed)),a(e)}),onCollide("bullet","player",(e,r)=>{destroy(e),r.hurt(e.damage)})}const H={bulletCount:6,bulletSpeed:200,hp:1,damage:1,shootInterval:2,dropTime:2,explosionSize:75,deathPartsCount:150,deathPartsSpeed:[300,10],deathPartsLife:.4,deathShake:3,deathScore:20};function ae(a,e={}){const r=add([{...H},"sTurretART"]);return r.spawn=(o,t={})=>{const{bulletCount:c=r.bulletCount,bulletSpeed:u=r.bulletSpeed,hp:g=r.hp,damage:v=r.damage,shootInterval:d=r.shootInterval,dropTime:m=r.dropTime,explosionSize:S=r.explosionSize,deathPartsCount:w=r.deathPartsCount,deathPartsSpeed:b=r.deathPartsSpeed,deathPartsLife:i=r.deathPartsLife,deathShake:s=r.deathShake,deathScore:n=r.deathScore}=t,l=add([sprite("turretART"),pos(o),area(),body(),health(g),color(h.foreground),anchor("center"),"enemy",{bulletCount:c,bulletSpeed:u,damage:v,shootInterval:d}]);function f(){const x=get("player")[0].pos,y=add([sprite("dropArea"),pos(x),color(h.foreground),anchor("center"),timer(),"dropArea"]);y.wait(m,()=>{destroy(y);const k=add([circle(S),pos(x),color(h.foreground),area(),timer(),"explosion",{damage:v}]);k.wait(.2,()=>{destroy(k)})})}const p=loop(l.shootInterval,()=>{f()});return l.onHurt(()=>{if(l.hp()==1/0||l.hp()<=0)return;const x=add([pos(l.pos),particles({max:w,speed:b,angle:[0,360],angularVelocity:[45,90],lifeTime:[i,i],colors:[rgb(h.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:i,rate:0,direction:0,spread:180}),timer()]);x.emit(w/3),shake(Math.max(s/3,1)),x.wait(i*2,()=>{destroy(x)})}),l.onDestroy(()=>{p.cancel(),destroy(l),get("dropArea").map(x=>{destroy(x)}),get("explosion").map(x=>{destroy(x)})}),l.onDeath(()=>{const x=add([pos(l.pos),particles({max:w,speed:b,angle:[0,360],angularVelocity:[45,90],lifeTime:[i,i],colors:[rgb(h.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:i,rate:0,direction:0,spread:180}),timer()]);x.emit(w),shake(s),p.cancel(),destroy(l),x.wait(i*2,()=>{destroy(x)}),get("gameManager")[0].addScore(n)}),l},r}function re(){onCollide("player","explosion",(a,e)=>{a.hurt(e.damage)})}const q={bulletCount:3,bulletSpeed:200,hp:1,damage:1,shootInterval:2,size:24,bulletSize:6,deathPartsCount:150,deathPartsSpeed:[300,10],deathPartsLife:.4,deathShake:3,deathScore:20};function se(a,e,r={}){const o=add([{...q},"sTurretBT"]);return o.spawn=(t,c,u={})=>{const{bulletCount:g=o.bulletCount,bulletSpeed:v=o.bulletSpeed,hp:d=o.hp,damage:m=o.damage,shootInterval:S=o.shootInterval,size:w=o.size,bulletSize:b=o.bulletSize,deathPartsCount:i=o.deathPartsCount,deathPartsSpeed:s=o.deathPartsSpeed,deathPartsLife:n=o.deathPartsLife,deathShake:l=o.deathShake,deathScore:f=o.deathScore}=u,p=add([sprite("turretBT"),pos(t),area(),body(),health(1/0),color(h.foreground),anchor("center"),"enemy",{bulletCount:g,bulletSpeed:v,damage:m,shootInterval:S}]),x=add([sprite("button"),pos(c),area(),body(),color(h.foreground),anchor("center"),"enemy"]);p.use(shader("hollow",()=>({r:h.foreground.at(0)/255,g:h.foreground.at(1)/255,b:h.foreground.at(2)/255,texSize:vec2(getSprite("turretBT").data.tex.width,getSprite("turretBT").data.tex.height)}))),x.onCollide("player",()=>{p.shader=null,p.setHP(d),destroy(x)});function y(){const M=get("player")[0].pos.sub(p.pos).unit(),R=Math.PI/5,I=p.bulletCount,B=-R/2,D=R/(I-1);for(let C=0;C<I;C++){const z=B+C*D,K=vec2(M.x*Math.cos(z)-M.y*Math.sin(z),M.x*Math.sin(z)+M.y*Math.cos(z)).unit();add([circle(b),pos(p.pos),color(h.foreground),area(),"bullet",{dir:K,speed:p.bulletSpeed,damage:p.damage}])}}const k=loop(p.shootInterval,()=>{y()});return p.onHurt(()=>{if(p.hp()==1/0||p.hp()<=0)return;const P=add([pos(p.pos),particles({max:i,speed:s,angle:[0,360],angularVelocity:[45,90],lifeTime:[n,n],colors:[rgb(h.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:n,rate:0,direction:0,spread:180}),timer()]);P.emit(i/3),shake(Math.max(l/3,1)),P.wait(n*2,()=>{destroy(P)})}),p.onDestroy(()=>{k.cancel(),destroy(p)}),p.onDeath(()=>{const P=add([pos(p.pos),particles({max:i,speed:s,angle:[0,360],angularVelocity:[45,90],lifeTime:[n,n],colors:[rgb(h.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:n,rate:0,direction:0,spread:180}),timer()]);P.emit(i),shake(l),k.cancel(),destroy(p),P.wait(n*2,()=>{destroy(P)}),get("gameManager")[0].addScore(f)}),p},o}const Y={bulletCount:1,bulletSpeed:150,hp:1,damage:1,shootTimes:1,shootIntervalShort:.1,shootIntervalLong:3,bulletSize:6,deathPartsCount:150,deathPartsSpeed:[300,10],deathPartsLife:.4,deathShake:3,deathScore:20};function ne(a,e={}){const r=add([{...Y},"sTurretMISS"]);return r.spawn=(o,t={})=>{const{bulletCount:c=r.bulletCount,bulletSpeed:u=r.bulletSpeed,hp:g=r.hp,damage:v=r.damage,shootTimes:d=r.shootTimes,shootIntervalShort:m=r.shootIntervalShort,shootIntervalLong:S=r.shootIntervalLong,bulletSize:w=r.bulletSize,deathPartsCount:b=r.deathPartsCount,deathPartsSpeed:i=r.deathPartsSpeed,deathPartsLife:s=r.deathPartsLife,deathShake:n=r.deathShake,deathScore:l=r.deathScore}=t,f=add([sprite("turretMISS"),pos(o),area(),body(),health(g),color(h.foreground),anchor("center"),timer(),"enemy",{bulletCount:c,bulletSpeed:u,damage:v}]);function p(){const y=Math.PI/8,k=2,P=-y/2,M=y/(k-1);for(let R=0;R<d;R++)f.wait(m*R,()=>{for(let I=0;I<k;I++){const D=get("player")[0].pos.sub(f.pos).unit(),C=P+I*M,z=vec2(D.x*Math.cos(C)-D.y*Math.sin(C),D.x*Math.sin(C)+D.y*Math.cos(C)).unit();add([circle(w),pos(f.pos),color(h.foreground),area(),"bullet",{dir:z,speed:f.bulletSpeed,damage:f.damage}])}})}const x=loop(S,()=>{p()});return f.onHurt(()=>{if(f.hp()<=0)return;const y=add([pos(f.pos),particles({max:b,speed:i,angle:[0,360],angularVelocity:[45,90],lifeTime:[s,s],colors:[rgb(h.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:s,rate:0,direction:0,spread:180}),timer()]);y.emit(b/3),shake(Math.max(n/3,1)),y.wait(s*2,()=>{destroy(y)})}),f.onDestroy(()=>{x.cancel(),destroy(f)}),f.onDeath(()=>{const y=add([pos(f.pos),particles({max:b,speed:i,angle:[0,360],angularVelocity:[45,90],lifeTime:[s,s],colors:[rgb(h.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:s,rate:0,direction:0,spread:180}),timer()]);y.emit(b),shake(n),x.cancel(),destroy(f),y.wait(s*2,()=>{destroy(y)}),get("gameManager")[0].addScore(l)}),f},r}async function ie(a,e,r){const o=await loadSprite("upgrade","./sprites/upgrade.png"),t=add([timer(),"upgradeSystem"]),c=await a.hookAbility,u=await a.attackAbility;return t.ar=get("sTurretAR")[0],t.art=get("sTurretART")[0],t.bt=get("sTurretBT")[0],t.miss=get("sTurretMISS")[0],t.upgrades=[],t.getRandomUpgrade=()=>{if(t.upgrades.length!==0)return t.upgrades[Math.floor(Math.random()*t.upgrades.length)]},t.openUpgradeWindow=async g=>{c.endPos=null,c.isRopeActive=!1,c.currentCooldown=0,a.moveTo(vec2(center().x,center().y+100));const v=t.getRandomUpgrade(),d=t.getRandomUpgrade(),m=add([sprite(v.s),pos(vec2(center().x-150,center().y-100)),area(),anchor("center"),animate(),timer(),"upgrade",{...v,t:g}]);m.add([text(m.text,{size:24,font:"Tiny",align:"center"}),pos(-75,45),layer("ui"),color(U.foreground)]);const S=add([sprite(d.s),pos(vec2(center().x+150,center().y-100)),area(),anchor("center"),animate(),timer(),"upgrade",{...d,t:g}]);S.add([text(S.text,{size:24,font:"Tiny",align:"center"}),pos(-75,45),layer("ui"),color(U.foreground)])},onCollide("player","upgrade",(g,v)=>{v.callback(),v.animate("scale",[vec2(1,1),vec2(0,0)],{duration:.2,direction:"forward",loops:1}),v.animation.seek(0),v.wait(.3,()=>{get("upgrade").map(d=>{destroy(d),v.t.paused=!1})})}),t.upgrades.push({s:o,text:`Reduces hook
 cooldown by 20%`,callback:()=>{c.hookCooldown=c.hookCooldown*.8}}),t.upgrades.push({s:o,text:"full hp",callback:()=>{a.setHP(a.maxHP())}}),t.upgrades.push({s:o,text:`+3 max hp
+3 hp`,callback:()=>{a.setMaxHP(a.maxHP()+3),a.setHP(a.hp()+3)}}),t.upgrades.push({s:o,text:`Reduces the firing rate
of all enemies by 30%
(except spiders)
 but adds +1 HP to them.`,callback:()=>{t.ar.shootInterval=t.ar.shootInterval*1.3,t.ar.hp=t.ar.hp+1,t.art.shootInterval=t.art.shootInterval*1.3,t.art.hp=t.art.hp+1,t.bt.shootInterval=t.bt.shootInterval*1.3,t.bt.hp=t.bt.hp+1,t.miss.shootIntervalLong=t.miss.shootIntervalLong*1.3,t.miss.hp=t.miss.hp+1}}),t.upgrades.push({s:o,text:`Reduces bullet size by 30%
but adds +1 damage to them`,callback:()=>{t.ar.bulletSize=t.ar.bulletSize*.2,t.ar.damage=t.ar.damage+1,t.art.bulletSize=t.art.bulletSize*.2,t.art.damage=t.art.damage+1,t.bt.bulletSize=t.bt.bulletSize*.2,t.bt.damage=t.bt.damage+1,t.miss.bulletSize=t.miss.bulletSize*.2,t.miss.damage=t.miss.damage+1}}),t.upgrades.push({s:o,text:`Reduces attack
 cooldown by 20%`,callback:()=>{u.attackCooldown=u.attackCooldown*.8}}),t.upgrades.push({s:o,text:`increase player
movement speed by 15%`,callback:()=>{a.speed=a.speed*1.15}}),t.upgrades.push({s:o,text:`increase attack
 damage by 1
 but also increase
 cooldown by 30%`,callback:()=>{u.damage=u.damage+1,u.attackCooldown=u.attackCooldown*1.3}}),t}async function ce(a,e,r){const o=add([timer(),{score:0,difficulty:1,spawnInterval:2,events:{}},"gameManager"]);o.upgrade=await ie(a),o.addScore=i=>{o.score+=i,t(),v("scoreChanged",o.score)};function t(){o.difficulty=1+Math.floor(o.score/100),o.spawnInterval=Math.max(.5,3-o.difficulty*.2)}function c(){const i=u(),s=g(e,r);if(i==="spider"&&Q(s,e,r,{speed:T.speed+o.difficulty*5}),i==="turretAR"){const n=get("sTurretAR")[0];n.spawn(s,{bulletCount:n.bulletCount+o.difficulty/3,bulletSpeed:n.bulletSpeed+o.difficulty,bulletSize:n.bulletSize+o.difficulty/4})}if(i==="turretART"){const n=get("sTurretART")[0];n.spawn(s,{bulletCount:n.bulletCount+o.difficulty/3,bulletSpeed:n.bulletSpeed+o.difficulty,bulletSize:n.bulletSize+o.difficulty/5})}if(i==="turretBT"){const n=get("sTurretBT")[0];n.spawn(s,g(e,r),{bulletCount:n.bulletCount+o.difficulty/3,bulletSpeed:n.bulletSpeed+o.difficulty,bulletSize:n.bulletSize+o.difficulty/4})}if(i==="turretMISS"){const n=get("sTurretMISS")[0];n.spawn(s,{shootTimes:n.shootTimes+o.difficulty/3,bulletSize:n.bulletSize+o.difficulty/3})}}function u(){const i=[.4,.2,.2,.2,.2],s=["spider","turretAR","turretART","turretBT","turretMISS"],n=i.reduce((p,x)=>p+x,0),l=Math.random()*n;let f=0;for(let p=0;p<s.length;p++)if(f+=i[p],l<=f)return s[p];return s[0]}function g(i,s){let n,l=0;do{const f=Math.random()*Math.PI*2,p=Math.sqrt(Math.random())*s;if(n=vec2(i.x+Math.cos(f)*p,i.y+Math.sin(f)*p),l++,l>100)break}while(n.dist(a.pos)<150);return n}function v(i,s){const n=o.events[i];n&&n.forEach(l=>l(s))}o.onScoreChange=i=>{o.events.scoreChanged||(o.events.scoreChanged=[]),o.events.scoreChanged.push(i)};const d=o.loop(o.spawnInterval,c);let m=0,S=0;function w(i){i-m>=300&&(m+=300,o.upgrade.openUpgradeWindow(d),d.paused=!0,get("enemy").map(s=>{destroy(s)}),get("bullet").map(s=>{destroy(s)})),i-S>=500&&(S+=500,b())}function b(){const i=["turretAR","turretART","turretBT","turretMISS"];if(i.length===0)return;const s=i[Math.floor(Math.random()*i.length)];s=="turretAR"&&(_.hp=_.hp+1),s=="turretBT"&&(q.hp=q.hp+1),s=="turretART"&&(H.hp=H.hp+1),s=="turretMISS"&&(Y.hp=H.hp+1)}return o.onScoreChange(()=>{w(o.score)}),o}const O={c:null,async init(){await loadSprite("crosshair","./sprites/crosshair.png"),this.c=add([sprite("crosshair"),pos(center()),color(h.foreground),anchor("center"),"cursor"]),this.c.use(shader("newTint",()=>({r:h.foreground.at(0)/255,g:h.foreground.at(1)/255,b:h.foreground.at(2)/255}))),setCursor("none"),onUpdate(()=>{this.c&&(this.c.pos=mousePos())})},getCursorPos(){return this.c?this.c.pos:null}},de=1.5;async function le(a){const e=add([pos(64,height()-64),sprite("axe"),scale(1),color(h.foreground),anchor("center"),shader(),animate(),timer()]);e.canAttack=!0,e.attackCooldown=de,e.cooldown=0,e.use(shader("cooldown",()=>({r:a.color.r/255,g:a.color.g/255,b:a.color.b/255,h:64*(e.cooldown/e.attackCooldown),texSize:vec2(2048,2048)}))),e.damage=1,e.maxDist=150,e.speed=800;let r=!1,o=null,t=null;return e.getCanAttack=()=>e.canAttack,e.animate("scale",[vec2(1,1),vec2(1.2,1.2),vec2(1,1)],{duration:.2,direction:"ping-pong",loops:1}),e.Attack=()=>{if(!e.canAttack||r==!0)return;e.scale=vec2(1,1),r=!0,e.cooldown=e.attackCooldown;const c=e.loop(.05,()=>{if(e.cooldown<=0){r=!1,e.cooldown=0,e.animation.seek(0),c.cancel();return}e.cooldown=e.cooldown-.05});t=e.getAttackDir(),o=e.getAttackPos()},e.getAttackDir=()=>{const c=a.pos;return O.getCursorPos().sub(c).unit()},e.getAttackPos=()=>vec2(a.pos.x+t.x*e.maxDist,a.pos.y+t.y*e.maxDist),onMousePress("left",()=>{e.Attack()}),e.onUpdate(()=>{o!=null&&(a.setInv(!0),a.canMove=!1,a.moveTo(o,e.speed),a.getCollisions()[0]&&a.getCollisions().map(u=>{if(u.target.tags.includes("enemy")){if(!u.target.hurt)return;o=null,a.canMove=!0,u.target.hurt();return}}),a.setInvTime(.1),o!=null&&o.x.toFixed(0)==a.pos.x.toFixed(0)&&o.y.toFixed(0)==a.pos.y.toFixed(0)&&(o=null,a.canMove=!0))}),e}const ue={hookCooldown:5};async function pe(a){const e=add([pos(width()-64,height()-64),sprite("hook"),color(h.foreground),anchor("center"),animate(),timer()]);return e.hookCooldown=ue.hookCooldown,e.currentCooldown=0,e.use(shader("cooldown",()=>({r:a.color.r/255,g:a.color.g/255,b:a.color.b/255,h:64*(e.currentCooldown/e.hookCooldown),texSize:vec2(2048,2048)}))),e.ab=await a.attackAbility,e.endPos=null,e.isRopeActive=!1,e.canUseHook=!0,e.DrawRope=async()=>{drawLine({p1:a.pos,p2:e.endPos,width:4,color:rgb(h.foreground)})},e.calcEndPos=async()=>{const r=await A.getCurrentSceneData(),o=a.pos,t=O.getCursorPos(),c=r.centerPos,u=r.radius,g=raycast(a.pos,t.sub(o).unit().scale(800),["player","bullet","solid"]);if(g&&g.object.tags.includes("enemy")){e.endPos=g.object.pos,g.object.hurt(a.damage);return}const v=t.sub(o),d=o.sub(c),m=v.dot(v),S=2*d.dot(v),w=d.dot(d)-u*u,b=S*S-4*m*w;let i;if(b<0)i=t;else{const s=(-S+Math.sqrt(b))/(2*m),n=(-S-Math.sqrt(b))/(2*m),l=Math.max(s,n,0);i=o.add(v.scale(l))}e.endPos=i},e.onUpdate(()=>{e.isRopeActive&&e.endPos!=null&&(e.DrawRope(),e.endPos!=null&&(a.setInv(!0),a.canMove=!1,a.moveTo(e.endPos,1500)),(e.endPos!=null&&a.pos.dist(e.endPos)<40||!e.isRopeActive)&&(e.isRopeActive=!1,e.endPos=null,e.ab.canAttack=!0,a.canMove=!0,a.setInvTime(.1)))}),e.animate("scale",[vec2(1,1),vec2(1.2,1.2),vec2(1,1)],{duration:.2,direction:"ping-pong",loops:1}),onMousePress("right",async()=>{if(e.isRopeActive||!e.canUseHook)return;e.canUseHook=!1,e.currentCooldown=e.hookCooldown;const r=e.loop(.1,()=>{if(e.currentCooldown<=0){e.canUseHook=!0,e.currentCooldown=0,e.animation.seek(0),r.cancel();return}e.currentCooldown=e.currentCooldown-.1});e.ab.canAttack=!1,e.calcEndPos(),e.isRopeActive=!0}),onMousePress("left",async()=>{e.isRopeActive&&(e.isRopeActive=!1,e.endPos=null,a.canMove=!0,a.setInv(!1),e.ab.canAttack=!0)}),e}const L=5,he=300,X=.3,fe=async a=>{let e=vec2(8,3),r=!0;loadSprite("hero","./sprites/all.png",{sliceX:e.x,sliceY:e.y,anims:{afk:0,idle:{from:0,to:7,loop:!0},walk:{from:8,to:14,loop:!0}}});const o=await getSprite("hero"),t=add([sprite(o),health(L,L),pos(a),color(h.foreground),area({shape:new Polygon([vec2(-18,12),vec2(10,12),vec2(10,-20),vec2(-18,-20)])}),body(),anchor(vec2(.2,.5)),timer(),{maxHeath:L,health:L,speed:he,invAfterHurt:X},"player"]);t.use(shader("playerShader",()=>({r:t.color.r/255,g:t.color.g/255,b:t.color.b/255,h:596+(1-t.hp()/t.maxHP())*1452,texSize:vec2(o.tex.width,o.tex.height),frameOffset:vec2(o.frames[t.frame].x,o.frames[t.frame].y),frameSize:vec2(o.frames[t.frame].w,o.frames[t.frame].h)}))),t.canMove=!0,t.isMoving=!1;const c={KeyW:"up",KeyA:"left",KeyS:"down",KeyD:"right"},u={};document.addEventListener("keydown",d=>{const m=c[d.code];m&&(u[m]=!0)}),document.addEventListener("keyup",d=>{const m=c[d.code];m&&(u[m]=!1)});function g(d){return!!u[d]}const v=()=>{if(!t.canMove)return;let d=0,m=0;g("left")&&(d-=1),g("right")&&(d+=1),g("up")&&(m-=1),g("down")&&(m+=1);let S=vec2(d,m);S.len()>0&&(S=S.unit(),t.lastDirection=S,t.move(S.x*t.speed,S.y*t.speed),t.flipX=S.x<0)};return t.attackAbility=le(t),t.hookAbility=pe(t),t.onUpdate(()=>{if(v(),(g("left")||g("right")||g("up")||g("down"))&&t.canMove){if(t.isMoving=!0,t.curAnim()=="walk")return;t.play("walk")}else{if(t.isMoving=!1,t.curAnim()=="idle")return;t.play("afk")}}),t.hurt=d=>{r&&(t.setInvTime(X),t.setHP(t.hp()-d),t.trigger("hurt"))},t.setInvTime=d=>{r=!1,t.wait(d,()=>{r=!0})},t.setInv=d=>{r=!d},t.setInvBulletTime=d=>{t.wait(d,()=>{})},t.setInvBullet=d=>{},t.onHurt(()=>{t.hp()<=0||(shake(4),E([156,23,59]),t.wait(.3,()=>{E(U.foreground)}))}),t.onDeath(()=>{A.startScene("death")}),onKeyPress("space",async()=>{get("bullet").map(m=>{m.radius=m.radius*3})}),t},ge=async()=>{E(U.foreground),await O.init();const a=vec2(center().x,center().y*1.7),e=await fe(a),r=vec2(width()/2,height()/2),o=width()/2-16,t=36;add([pos(r),circle(o,{fill:!1}),outline(2,Color.fromArray(h.foreground)),"border"]),e.onUpdate(()=>{if(e.pos.dist(r)>o-t){const v=e.pos.sub(r).unit();e.pos=r.add(v.scale(o-t))}}),oe(g=>{g.pos.dist(r)>o-g.radius&&destroy(g)}),re(),await J(),Z(),te(),ae(),se(),ne();const c=await ce(e,r,o),u=add([text(get("gameManager")[0].score,{font:"Tiny"}),pos(20,20),layer("ui"),color(h.foreground)]);return c.onScoreChange(()=>{u.text=c.score}),{centerPos:r,radius:o}},me=async a=>{const e=vec2(width()/2,height()/2),r=width()/2-16;add([pos(e),circle(r,{fill:!1}),outline(2,Color.fromArray(h.foreground))]);const o=add([text(`You are dead!
Press space to restart`,{font:"Tiny",align:"center"}),color(h.foreground),pos(center()),anchor("center"),layer("ui"),animate()]);return onKeyPress("space",()=>{A.startScene("test")}),o.animate("scale",[0,1],{duration:.5,loops:1}),a};function Se(){loadSprite("axe","./sprites/axe.png"),loadSprite("hook","./sprites/hook.png"),loadShader("playerShader",null,`
  precision mediump float;

  uniform float r;
  uniform float g;
  uniform float b;
  uniform float h;
  uniform vec2 texSize;
  uniform vec2 frameOffset;
  uniform vec2 frameSize;

  vec4 frag(vec2 pos, vec2 uv, vec4 color, sampler2D tex) {
      vec4 c = texture2D(tex, uv);

      if (c.a < 0.01) {
          return c;
      }

      vec2 offsetX = vec2(1.0 / texSize.x, 0.0);
      vec2 offsetY = vec2(0.0, 1.0 / texSize.y);

      float alphaUp    = texture2D(tex, uv + offsetY).a;
      float alphaDown  = texture2D(tex, uv - offsetY).a;
      float alphaLeft  = texture2D(tex, uv - offsetX).a;
      float alphaRight = texture2D(tex, uv + offsetX).a;

      if (alphaUp < 0.01 || alphaDown < 0.01 || alphaLeft < 0.01 || alphaRight < 0.01) {
          return vec4(r, g, b, c.a);
      }

      vec2 pixelCoord = uv * texSize;
      vec2 localPixel = pixelCoord - (frameOffset * texSize);
      vec2 localUV = localPixel / frameSize; // 0..1 по фрейму

      if (localUV.y <= h) {
          return vec4(1.0, 0.0, 0.0, 0.0);
      }

      return vec4(r, g, b, c.a);
      }
      `),loadShader("cooldown",null,`
  precision mediump float;

    uniform float r;
  uniform float g;
  uniform float b;
  uniform float h;
  uniform vec2 texSize;

  vec4 frag(vec2 pos, vec2 uv, vec4 color, sampler2D tex) {
      vec4 c = texture2D(tex, uv);

      if (c.a < 0.01) {
          return c;
      }

      vec2 offsetX = vec2(1.0 / texSize.x, 0.0);
      vec2 offsetY = vec2(0.0, 1.0 / texSize.y);

      float alphaUp    = texture2D(tex, uv + offsetY).a;
      float alphaDown  = texture2D(tex, uv - offsetY).a;
      float alphaLeft  = texture2D(tex, uv - offsetX).a;
      float alphaRight = texture2D(tex, uv + offsetX).a;

      if (alphaUp < 0.01 || alphaDown < 0.01 || alphaLeft < 0.01 || alphaRight < 0.01) {
          return vec4(r, g, b, c.a);
      }

      vec2 pixelCoord = uv * texSize;

      if (pixelCoord.y <= h) {
          return vec4(c.r, c.g, c.b, 0.0);
      }

      return vec4(r, g, b, c.a);
      }
      `),loadShader("newTint",null,`
    precision mediump float;

    uniform float r;
    uniform float g;
    uniform float b;

    vec4 frag(vec2 pos, vec2 uv, vec4 color, sampler2D tex) {
      vec4 c = def_frag();

      return vec4(r, g, b, c.a);
    }
    `),loadShader("hollow",null,`
  precision mediump float;

  uniform float r;
  uniform float g;
  uniform float b;
  uniform vec2 texSize;

  vec4 frag(vec2 pos, vec2 uv, vec4 color, sampler2D tex) {
    vec4 c = texture2D(tex, uv);

    if (c.a < 0.1) {
        return c;
    }

    vec2 offsetX = vec2(1.0 / texSize.x, 0.0);
    vec2 offsetY = vec2(0.0, 1.0 / texSize.y);

    float alphaUp    = texture2D(tex, uv + offsetY).a;
    float alphaDown  = texture2D(tex, uv - offsetY).a;
    float alphaLeft  = texture2D(tex, uv - offsetX).a;
    float alphaRight = texture2D(tex, uv + offsetX).a;

    if (alphaUp < 0.01 || alphaDown < 0.01 || alphaLeft < 0.01 || alphaRight < 0.01) {
        return vec4(r, g, b, c.a);
    }

    return vec4(0,0,0,0);
  }
  `)}const V=W({background:[h.background],width:j,height:$,scale:1,pixelated:!0});N(V);loadFont("Tiny","./fonts/Tiny5-Regular.ttf");Se();await ee();A.init(V);A.addScene("test",ge);A.addScene("death",me);A.startScene("test");const ve=document.querySelector("body");ve.style.backgroundColor=rgb(h.background);
//# sourceMappingURL=index-Pmg_stPB.js.map
