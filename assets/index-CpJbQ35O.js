import{h as Y}from"./kaplay-CpR_OpMc.js";(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))a(t);new MutationObserver(t=>{for(const c of t)if(c.type==="childList")for(const g of c.addedNodes)g.tagName==="LINK"&&g.rel==="modulepreload"&&a(g)}).observe(document,{childList:!0,subtree:!0});function e(t){const c={};return t.integrity&&(c.integrity=t.integrity),t.referrerPolicy&&(c.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?c.credentials="include":t.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function a(t){if(t.ep)return;t.ep=!0;const c=e(t);fetch(t.href,c)}})();function O(o){const n=document.querySelector("canvas"),e=window.innerWidth,a=window.innerHeight,t=Math.floor(e/o.width),c=Math.floor(a/o.height),g=Math.max(1,Math.min(t,c));n.style.width=o.width*g+"px",n.style.height=o.height*g+"px",n.style.imageRendering="pixelated",n.style.position="absolute",n.style.top="50%",n.style.left="50%",n.style.transform="translate(-50%, -50%)"}function V(){const o=document.querySelector("canvas");o.requestFullscreen?o.requestFullscreen():o.webkitRequestFullscreen&&o.webkitRequestFullscreen()}function K(o){window.addEventListener("resize",O(o)),window.addEventListener("load",O(o)),document.addEventListener("keydown",n=>{n.key==="f"&&V()})}const W=800,G=800,H={foreground:[237,242,226]},p={background:[34,42,61],foreground:[237,242,226]};function E(o){p.foreground=o,get("*").map(e=>{e.color&&(e.color=Color.fromArray(o)),e.outline&&(e.outline.color=Color.fromArray(o))})}const z={kaplayInstance:null,currentScene:null,sceneData:{},init(o){this.kaplayInstance=o},addScene(o,n){if(!this.kaplayInstance){console.error("Kaplay instance не инициализирован");return}this.kaplayInstance.scene(o,()=>{const e=n();return this.sceneData[o]=e,e})},startScene(o){if(!this.kaplayInstance){console.error("Kaplay instance не инициализирован");return}this.currentScene=o,this.kaplayInstance.go(o)},getCurrentSceneData(){return this.sceneData[this.currentScene]}};async function N(){await loadSprite("spider","./sprites/spider.png")}const T={size:10,speed:200,moveInterval:1.5,damage:1,aggroRange:200,travelRange:200,hp:1,deathPartsCount:50,deathPartsSpeed:[300,10],deathPartsLife:.4,deathShake:2,deathScore:10};function j(o,n,e,a={}){const{size:t=T.size,speed:c=T.speed,moveInterval:g=T.moveInterval,damage:h=T.damage,aggroRange:S=T.aggroRange,travelRange:s=T.travelRange,hp:l=T.hp,deathPartsCount:u=T.deathPartsCount,deathPartsSpeed:v=T.deathPartsSpeed,deathPartsLife:m=T.deathPartsLife,deathShake:i=T.deathShake,deathScore:r=T.deathScore}=a;let f=o;const d=add([sprite("spider"),pos(o),color(p.foreground),area(),body(),health(l),anchor("center"),"enemy","spider",{damage:h,speed:c,size:t}]);function y(){const C=get("player")[0];if(C){const I=d.pos.dist(C.pos);if(I<S&&I>C.width+t){f=vec2(C.pos.x,C.pos.y),d.moveTo(f,c);return}}f=b(),f.dist(n)>e-t&&(f=center())}function b(){return vec2(d.pos.x+rand(-s,s),d.pos.y+rand(-s,s))}function A(){d.moveTo(f,c)}return loop(g,()=>{y()}),d.onUpdate(()=>{A()}),d.onHurt(()=>{if(d.hp()<=0)return;const C=add([pos(d.pos),particles({max:u,speed:v,angle:[0,360],angularVelocity:[45,90],lifeTime:[m,m],colors:[rgb(p.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:m,rate:0,direction:0,spread:180}),timer()]);C.emit(u/3),shake(Math.max(i/3,1)),C.wait(m*2,()=>{destroy(C)})}),d.onDeath(()=>{const C=add([pos(d.pos),particles({max:u,speed:v,angle:[0,360],angularVelocity:[45,90],lifeTime:[m,m],colors:[rgb(p.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:m,rate:0,direction:0,spread:180}),timer()]);C.emit(u),shake(i),destroy(d),C.wait(m*2,()=>{destroy(C)}),get("gameManager")[0].addScore(r)}),d}function $(){onCollide("spider","player",(o,n)=>{n.hurt(o.damage)})}async function J(){await loadSprite("button","./sprites/button.png"),await loadSprite("dropArea","./sprites/dropArea.png"),await loadSprite("turretAR","./sprites/turretAR.png"),await loadSprite("turretMISS","./sprites/turretMISS.png"),await loadSprite("turretBT","./sprites/turretBT.png"),await loadSprite("turretART","./sprites/turretART.png"),await loadSprite("deathParticlies","./sprites/dust.png")}const k={bulletCount:12,bulletSpeed:150,hp:1,damage:1,shootInterval:2,bulletSize:6,deathPartsCount:150,deathPartsSpeed:[300,10],deathPartsLife:.4,deathShake:3,deathScore:20};function Q(o,n={}){const{bulletCount:e=k.bulletCount,bulletSpeed:a=k.bulletSpeed,hp:t=k.hp,damage:c=k.damage,shootInterval:g=k.shootInterval,bulletSize:h=k.bulletSize,deathPartsCount:S=k.deathPartsCount,deathPartsSpeed:s=k.deathPartsSpeed,deathPartsLife:l=k.deathPartsLife,deathShake:u=k.deathShake,deathScore:v=k.deathScore}=n,m=add([sprite("turretAR"),pos(o),area(),body(),health(t),color(p.foreground),anchor("center"),"enemy",{bulletCount:e,bulletSpeed:a,damage:c,shootInterval:g}]);function i(){for(let f=0;f<m.bulletCount;f++){const d=f/m.bulletCount*Math.PI*2,y=vec2(Math.cos(d),Math.sin(d));add([circle(h),pos(m.pos),color(p.foreground),area(),"bullet",{dir:y,speed:m.bulletSpeed,damage:m.damage}])}}const r=loop(m.shootInterval,()=>{i()});return m.onHurt(()=>{if(m.hp()<=0)return;const f=add([pos(m.pos),particles({max:S,speed:s,angle:[0,360],angularVelocity:[45,90],lifeTime:[l,l],colors:[rgb(p.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:l,rate:0,direction:0,spread:180}),timer()]);f.emit(S/3),shake(Math.max(u/3,1)),f.wait(l*2,()=>{destroy(f)})}),m.onDestroy(()=>{r.cancel(),destroy(m)}),m.onDeath(()=>{const f=add([pos(m.pos),particles({max:S,speed:s,angle:[0,360],angularVelocity:[45,90],lifeTime:[l,l],colors:[rgb(p.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:l,rate:0,direction:0,spread:180}),timer()]);f.emit(S),shake(u),r.cancel(),destroy(m),f.wait(l*2,()=>{destroy(f)}),get("gameManager")[0].addScore(v)}),m}function Z(o){onUpdate("bullet",n=>{n.move(n.dir.scale(n.speed)),o(n)}),onCollide("bullet","player",(n,e)=>{destroy(n),e.hurt(n.damage)})}const x={bulletCount:6,bulletSpeed:200,hp:1,damage:1,shootInterval:2,dropTime:2,explosionSize:75,deathPartsCount:150,deathPartsSpeed:[300,10],deathPartsLife:.4,deathShake:3,deathScore:20};async function ee(o,n={}){const{bulletCount:e=x.bulletCount,bulletSpeed:a=x.bulletSpeed,hp:t=x.hp,damage:c=x.damage,shootInterval:g=x.shootInterval,dropTime:h=x.dropTime,explosionSize:S=x.explosionSize,deathPartsCount:s=x.deathPartsCount,deathPartsSpeed:l=x.deathPartsSpeed,deathPartsLife:u=x.deathPartsLife,deathShake:v=x.deathShake,deathScore:m=x.deathScore}=n,i=add([sprite("turretART"),pos(o),area(),body(),health(t),color(p.foreground),anchor("center"),"enemy",{bulletCount:e,bulletSpeed:a,damage:c,shootInterval:g}]);function r(){const d=get("player")[0].pos,y=add([sprite("dropArea"),pos(d),color(p.foreground),anchor("center"),timer(),"dropArea"]);y.wait(h,()=>{destroy(y);const b=add([circle(S),pos(d),color(p.foreground),area(),timer(),"explosion",{damage:c}]);b.wait(.2,()=>{destroy(b)})})}const f=loop(i.shootInterval,()=>{r()});return i.onHurt(()=>{if(i.hp()==1/0||i.hp()<=0)return;const d=add([pos(i.pos),particles({max:s,speed:l,angle:[0,360],angularVelocity:[45,90],lifeTime:[u,u],colors:[rgb(p.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:u,rate:0,direction:0,spread:180}),timer()]);d.emit(s/3),shake(Math.max(v/3,1)),d.wait(u*2,()=>{destroy(d)})}),i.onDestroy(()=>{f.cancel(),destroy(i),get("dropArea").map(d=>{destroy(d)}),get("explosion").map(d=>{destroy(d)})}),i.onDeath(()=>{const d=add([pos(i.pos),particles({max:s,speed:l,angle:[0,360],angularVelocity:[45,90],lifeTime:[u,u],colors:[rgb(p.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:u,rate:0,direction:0,spread:180}),timer()]);d.emit(s),shake(v),f.cancel(),destroy(i),d.wait(u*2,()=>{destroy(d)}),get("gameManager")[0].addScore(m)}),i}function te(){onCollide("player","explosion",(o,n)=>{o.hurt(n.damage)})}const w={bulletCount:3,bulletSpeed:200,hp:1,damage:1,shootInterval:2,size:24,bulletSize:6,deathPartsCount:150,deathPartsSpeed:[300,10],deathPartsLife:.4,deathShake:3,deathScore:20};function oe(o,n,e={}){const{bulletCount:a=w.bulletCount,bulletSpeed:t=w.bulletSpeed,hp:c=w.hp,damage:g=w.damage,shootInterval:h=w.shootInterval,size:S=w.size,bulletSize:s=w.bulletSize,deathPartsCount:l=w.deathPartsCount,deathPartsSpeed:u=w.deathPartsSpeed,deathPartsLife:v=w.deathPartsLife,deathShake:m=w.deathShake,deathScore:i=w.deathScore}=e,r=add([sprite("turretBT"),pos(o),area(),body(),health(1/0),color(p.foreground),anchor("center"),"enemy",{bulletCount:a,bulletSpeed:t,damage:g,shootInterval:h}]),f=add([sprite("button"),pos(n),area(),body(),color(p.foreground),anchor("center"),"enemy"]);r.use(shader("hollow",()=>({r:p.foreground.at(0)/255,g:p.foreground.at(1)/255,b:p.foreground.at(2)/255,texSize:vec2(getSprite("turretBT").data.tex.width,getSprite("turretBT").data.tex.height)}))),f.onCollide("player",()=>{r.shader=null,r.setHP(c),destroy(f)});function d(){const A=get("player")[0].pos.sub(r.pos).unit(),C=Math.PI/5,D=r.bulletCount,I=-C/2,q=C/(D-1);for(let R=0;R<D;R++){const M=I+R*q,U=vec2(A.x*Math.cos(M)-A.y*Math.sin(M),A.x*Math.sin(M)+A.y*Math.cos(M)).unit();add([circle(s),pos(r.pos),color(p.foreground),area(),"bullet",{dir:U,speed:r.bulletSpeed,damage:r.damage}])}}const y=loop(r.shootInterval,()=>{d()});return r.onHurt(()=>{if(r.hp()==1/0||r.hp()<=0)return;const b=add([pos(r.pos),particles({max:l,speed:u,angle:[0,360],angularVelocity:[45,90],lifeTime:[v,v],colors:[rgb(p.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:v,rate:0,direction:0,spread:180}),timer()]);b.emit(l/3),shake(Math.max(m/3,1)),b.wait(v*2,()=>{destroy(b)})}),r.onDestroy(()=>{y.cancel(),destroy(r)}),r.onDeath(()=>{const b=add([pos(r.pos),particles({max:l,speed:u,angle:[0,360],angularVelocity:[45,90],lifeTime:[v,v],colors:[rgb(p.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:v,rate:0,direction:0,spread:180}),timer()]);b.emit(l),shake(m),y.cancel(),destroy(r),b.wait(v*2,()=>{destroy(b)}),get("gameManager")[0].addScore(i)}),r}const P={bulletCount:1,bulletSpeed:150,hp:1,damage:1,shootTimes:1,shootIntervalShort:.1,shootIntervalLong:3,bulletSize:6,deathPartsCount:150,deathPartsSpeed:[300,10],deathPartsLife:.4,deathShake:3,deathScore:20};function ae(o,n={}){const{bulletCount:e=P.bulletCount,bulletSpeed:a=P.bulletSpeed,hp:t=P.hp,damage:c=P.damage,shootTimes:g=P.shootTimes,shootIntervalShort:h=P.shootIntervalShort,shootIntervalLong:S=P.shootIntervalLong,bulletSize:s=P.bulletSize,deathPartsCount:l=P.deathPartsCount,deathPartsSpeed:u=P.deathPartsSpeed,deathPartsLife:v=P.deathPartsLife,deathShake:m=P.deathShake,deathScore:i=P.deathScore}=n,r=add([sprite("turretMISS"),pos(o),area(),body(),health(t),color(p.foreground),anchor("center"),timer(),"enemy",{bulletCount:e,bulletSpeed:a,damage:c}]);function f(){const y=Math.PI/8,b=2,A=-y/2,C=y/(b-1);for(let D=0;D<g;D++)r.wait(h*D,()=>{for(let I=0;I<b;I++){const R=get("player")[0].pos.sub(r.pos).unit(),M=A+I*C,U=vec2(R.x*Math.cos(M)-R.y*Math.sin(M),R.x*Math.sin(M)+R.y*Math.cos(M)).unit();add([circle(s),pos(r.pos),color(p.foreground),area(),"bullet",{dir:U,speed:r.bulletSpeed,damage:r.damage}])}})}const d=loop(S,()=>{f()});return r.onHurt(()=>{if(r.hp()<=0)return;const y=add([pos(r.pos),particles({max:l,speed:u,angle:[0,360],angularVelocity:[45,90],lifeTime:[v,v],colors:[rgb(p.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:v,rate:0,direction:0,spread:180}),timer()]);y.emit(l/3),shake(Math.max(m/3,1)),y.wait(v*2,()=>{destroy(y)})}),r.onDestroy(()=>{d.cancel(),destroy(r)}),r.onDeath(()=>{const y=add([pos(r.pos),particles({max:l,speed:u,angle:[0,360],angularVelocity:[45,90],lifeTime:[v,v],colors:[rgb(p.foreground)],texture:getSprite("deathParticlies").data.tex,quads:[getSprite("deathParticlies").data.frames[0]]},{lifetime:v,rate:0,direction:0,spread:180}),timer()]);y.emit(l),shake(m),d.cancel(),destroy(r),y.wait(v*2,()=>{destroy(y)}),get("gameManager")[0].addScore(i)}),r}const _={c:null,async init(){await loadSprite("crosshair","./sprites/crosshair.png"),this.c=add([sprite("crosshair"),pos(center()),color(p.foreground),anchor("center"),"cursor"]),this.c.use(shader("newTint",()=>({r:p.foreground.at(0)/255,g:p.foreground.at(1)/255,b:p.foreground.at(2)/255}))),setCursor("none"),onUpdate(()=>{this.c&&(this.c.pos=mousePos())})},getCursorPos(){return this.c?this.c.pos:null}},re={hookCooldown:5};async function ne(o){const n=await loadSprite("hook","./sprites/hook.png"),e=add([pos(width()-64,height()-64),sprite("hook"),color(p.foreground),anchor("center"),animate(),timer()]);return e.hookCooldown=re.hookCooldown,e.currentCooldown=0,e.use(shader("cooldown",()=>({r:o.color.r/255,g:o.color.g/255,b:o.color.b/255,h:64*(e.currentCooldown/e.hookCooldown),texSize:vec2(n.tex.width,n.tex.height)}))),e.ab=await o.attackAbility,e.endPos=null,e.isRopeActive=!1,e.canUseHook=!0,e.DrawRope=async()=>{drawLine({p1:o.pos,p2:e.endPos,width:4,color:rgb(p.foreground)})},e.calcEndPos=async()=>{const a=await z.getCurrentSceneData(),t=o.pos,c=_.getCursorPos(),g=a.centerPos,h=a.radius,S=raycast(o.pos,c.sub(t).unit().scale(800),["player","bullet","solid"]);if(S&&S.object.tags.includes("enemy")){e.endPos=S.object.pos,S.object.hurt(o.damage);return}const s=c.sub(t),l=t.sub(g),u=s.dot(s),v=2*l.dot(s),m=l.dot(l)-h*h,i=v*v-4*u*m;let r;if(i<0)r=c;else{const f=(-v+Math.sqrt(i))/(2*u),d=(-v-Math.sqrt(i))/(2*u),y=Math.max(f,d,0);r=t.add(s.scale(y))}e.endPos=r},e.onUpdate(()=>{e.isRopeActive&&e.endPos!=null&&(e.DrawRope(),e.endPos!=null&&(o.setInv(!0),o.canMove=!1,o.moveTo(e.endPos,1500)),(e.endPos!=null&&o.pos.dist(e.endPos)<40||!e.isRopeActive)&&(e.isRopeActive=!1,e.endPos=null,e.ab.canAttack=!0,o.canMove=!0,o.setInvTime(.1)))}),e.animate("scale",[vec2(1,1),vec2(1.2,1.2),vec2(1,1)],{duration:.2,direction:"ping-pong",loops:1}),onMousePress("right",async()=>{if(e.isRopeActive||!e.canUseHook)return;e.canUseHook=!1,e.currentCooldown=e.hookCooldown;const a=e.loop(.1,()=>{if(e.currentCooldown<=0){e.canUseHook=!0,e.currentCooldown=0,e.animation.seek(0),a.cancel();return}e.currentCooldown=e.currentCooldown-.1});e.ab.canAttack=!1,e.calcEndPos(),e.isRopeActive=!0}),onMousePress("left",async()=>{e.isRopeActive&&(e.isRopeActive=!1,e.endPos=null,o.canMove=!0,o.setInv(!1),e.ab.canAttack=!0)}),e}async function se(o,n,e){const a=await loadSprite("upgrade","./sprites/upgrade.png"),t=add([timer(),"upgradeSystem"]),c=await o.hookAbility,g=await o.attackAbility;return t.upgrades=[],t.getRandomUpgrade=()=>{if(t.upgrades.length!==0)return t.upgrades[Math.floor(Math.random()*t.upgrades.length)]},t.openUpgradeWindow=async h=>{c.endPos=null,c.isRopeActive=!1,c.currentCooldown=0,o.moveTo(vec2(center().x,center().y+100));const S=t.getRandomUpgrade(),s=t.getRandomUpgrade(),l=add([sprite(S.s),pos(vec2(center().x-150,center().y-100)),area(),anchor("center"),animate(),timer(),"upgrade",{...S,t:h}]);l.add([text(l.text,{size:24,font:"Tiny",align:"center"}),pos(-75,45),layer("ui"),color(H.foreground)]);const u=add([sprite(s.s),pos(vec2(center().x+150,center().y-100)),area(),anchor("center"),animate(),timer(),"upgrade",{...s,t:h}]);u.add([text(u.text,{size:24,font:"Tiny",align:"center"}),pos(-75,45),layer("ui"),color(H.foreground)])},onCollide("player","upgrade",(h,S)=>{S.callback(),S.animate("scale",[vec2(1,1),vec2(0,0)],{duration:.2,direction:"forward",loops:1}),S.animation.seek(0),S.wait(.3,()=>{get("upgrade").map(s=>{destroy(s),S.t.paused=!1})})}),t.upgrades.push({s:a,text:`Reduces hook
 cooldown by 20%`,callback:()=>{c.hookCooldown=c.hookCooldown*.8}}),t.upgrades.push({s:a,text:"full hp",callback:()=>{o.setHP(o.maxHP())}}),t.upgrades.push({s:a,text:`+3 max hp
+3 hp`,callback:()=>{o.setMaxHP(o.maxHP()+3),o.setHP(o.hp()+3)}}),t.upgrades.push({s:a,text:`Reduces the firing rate
of all enemies by 30%
(except spiders)
 but adds +1 HP to them.`,callback:()=>{k.shootInterval=k.shootInterval*1.3,k.hp=k.hp+1,x.shootInterval=x.shootInterval*1.3,x.hp=x.hp+1,w.shootInterval=w.shootInterval*1.3,w.hp=w.hp+1,P.shootIntervalLong=P.shootIntervalLong*1.3,P.hp=P.hp+1}}),t.upgrades.push({s:a,text:`Reduces bullet size by 30%
but adds +1 damage to them`,callback:()=>{k.bulletSize=k.bulletSize*.7,x.bulletSize=x.bulletSize*.7,w.bulletSize=w.bulletSize*.7,P.bulletSize=P.bulletSize*.7}}),t.upgrades.push({s:a,text:`Reduces attack
 cooldown by 20%`,callback:()=>{g.attackCooldown=g.attackCooldown*.8}}),t.upgrades.push({s:a,text:`increase player
movement speed by 15%`,callback:()=>{o.speed=o.speed*1.15}}),t.upgrades.push({s:a,text:`increase attack
 damage by 1
 but also increase
 cooldown by 30%`,callback:()=>{o.damage=o.damage+1,g.attackCooldown=g.attackCooldown*1.3}}),t}async function ie(o,n,e){const a=add([timer(),{score:0,difficulty:1,spawnInterval:2,events:{}},"gameManager"]);a.upgrade=await se(o),a.addScore=i=>{a.score+=i,t(),S("scoreChanged",a.score)};function t(){a.difficulty=1+Math.floor(a.score/100),a.spawnInterval=Math.max(.5,3-a.difficulty*.2)}function c(){const i=g(),r=h(n,e);i==="spider"&&j(r,n,e,{speed:T.speed+a.difficulty*5}),i==="turretAR"&&Q(r,{bulletCount:k.bulletCount+a.difficulty/3,bulletSpeed:k.bulletSpeed+a.difficulty,bulletSize:k.bulletSize+a.difficulty/4}),i==="turretART"&&ee(r,{bulletCount:x.bulletCount+a.difficulty/3,bulletSpeed:x.bulletSpeed+a.difficulty,bulletSize:x.bulletSize+a.difficulty/5}),i==="turretBT"&&oe(r,h(n,e),{bulletCount:w.bulletCount+a.difficulty/3,bulletSpeed:w.bulletSpeed+a.difficulty,bulletSize:w.bulletSize+a.difficulty/4}),i==="turretMISS"&&ae(r,{shootTimes:P.shootTimes+a.difficulty/3,bulletSize:P.bulletSize+a.difficulty/3})}function g(){const i=[.4,.2,.2,.2,.2],r=["spider","turretAR","turretART","turretBT","turretMISS"],f=i.reduce((b,A)=>b+A,0),d=Math.random()*f;let y=0;for(let b=0;b<r.length;b++)if(y+=i[b],d<=y)return r[b];return r[0]}function h(i,r){let f,d=0;do{const y=Math.random()*Math.PI*2,b=Math.sqrt(Math.random())*r;if(f=vec2(i.x+Math.cos(y)*b,i.y+Math.sin(y)*b),d++,d>100)break}while(f.dist(o.pos)<150);return f}function S(i,r){const f=a.events[i];f&&f.forEach(d=>d(r))}a.onScoreChange=i=>{a.events.scoreChanged||(a.events.scoreChanged=[]),a.events.scoreChanged.push(i)};const s=a.loop(a.spawnInterval,c);let l=0,u=0;function v(i){i-l>=300&&(l+=300,a.upgrade.openUpgradeWindow(s),s.paused=!0,get("enemy").map(r=>{destroy(r)}),get("bullet").map(r=>{destroy(r)})),i-u>=500&&(u+=500,m())}function m(){const i=["turretAR","turretART","turretBT","turretMISS"];if(i.length===0)return;const r=i[Math.floor(Math.random()*i.length)];r=="turretAR"&&(k.hp=k.hp+1),r=="turretBT"&&(w.hp=w.hp+1),r=="turretART"&&(x.hp=x.hp+1),r=="turretMISS"&&(P.hp=x.hp+1)}return a.onScoreChange(()=>{v(a.score)}),a}const F=1.5;async function ce(o){const n=await loadSprite("axe","./sprites/axe.png"),e=add([pos(64,height()-64),sprite("axe"),scale(1),color(p.foreground),anchor("center"),animate(),timer()]);e.canAttack=!0,e.attackCooldown=F,e.cooldown=0,e.use(shader("cooldown",()=>({r:o.color.r/255,g:o.color.g/255,b:o.color.b/255,h:64*(e.cooldown/e.attackCooldown),texSize:vec2(n.tex.width,n.tex.height)}))),e.damage=1,e.maxDist=150,e.speed=800;let a=!1,t=null,c=null;return e.getCanAttack=()=>e.canAttack,e.animate("scale",[vec2(1,1),vec2(1.2,1.2),vec2(1,1)],{duration:.2,direction:"ping-pong",loops:1}),e.Attack=()=>{if(!e.canAttack||a==!0)return;e.scale=vec2(1,1),a=!0,e.cooldown=F;const g=e.loop(.05,()=>{if(e.cooldown<=0){a=!1,e.cooldown=0,e.animation.seek(0),g.cancel();return}e.cooldown=e.cooldown-.05});c=e.getAttackDir(),t=e.getAttackPos()},e.getAttackDir=()=>{const g=o.pos;return _.getCursorPos().sub(g).unit()},e.getAttackPos=()=>vec2(o.pos.x+c.x*e.maxDist,o.pos.y+c.y*e.maxDist),onMousePress("left",()=>{e.Attack()}),e.onUpdate(()=>{t!=null&&(o.setInv(!0),o.canMove=!1,o.moveTo(t,e.speed),o.getCollisions()[0]&&o.getCollisions().map(h=>{if(h.target.tags.includes("enemy")){if(!h.target.hurt)return;t=null,o.canMove=!0,h.target.hurt();return}}),o.setInvTime(.1),t!=null&&t.x.toFixed(0)==o.pos.x.toFixed(0)&&t.y.toFixed(0)==o.pos.y.toFixed(0)&&(t=null,o.canMove=!0))}),e}const L=5,le=300,B=.3,de=async o=>{let n=vec2(8,3),e=!0;loadSprite("hero","./sprites/all.png",{sliceX:n.x,sliceY:n.y,anims:{afk:0,idle:{from:0,to:7,loop:!0},walk:{from:8,to:14,loop:!0}}});const a=await getSprite("hero"),t=add([sprite(a),health(L,L),pos(o),color(p.foreground),area({shape:new Polygon([vec2(-18,12),vec2(10,12),vec2(10,-20),vec2(-18,-20)])}),body(),anchor(vec2(.2,.5)),timer(),{maxHeath:L,health:L,speed:le,invAfterHurt:B},"player"]);t.use(shader("playerShader",()=>({r:t.color.r/255,g:t.color.g/255,b:t.color.b/255,h:596+(1-t.hp()/t.maxHP())*1452,texSize:vec2(a.tex.width,a.tex.height),frameOffset:vec2(a.frames[t.frame].x,a.frames[t.frame].y),frameSize:vec2(a.frames[t.frame].w,a.frames[t.frame].h)}))),t.canMove=!0,t.isMoving=!1;const c={KeyW:"up",KeyA:"left",KeyS:"down",KeyD:"right"},g={};document.addEventListener("keydown",s=>{const l=c[s.code];l&&(g[l]=!0)}),document.addEventListener("keyup",s=>{const l=c[s.code];l&&(g[l]=!1)});function h(s){return!!g[s]}const S=()=>{if(!t.canMove)return;let s=0,l=0;h("left")&&(s-=1),h("right")&&(s+=1),h("up")&&(l-=1),h("down")&&(l+=1);let u=vec2(s,l);u.len()>0&&(u=u.unit(),t.lastDirection=u,t.move(u.x*t.speed,u.y*t.speed),t.flipX=u.x<0)};return t.attackAbility=ce(t),t.hookAbility=ne(t),t.onUpdate(()=>{if(S(),(h("left")||h("right")||h("up")||h("down"))&&t.canMove){if(t.isMoving=!0,t.curAnim()=="walk")return;t.play("walk")}else{if(t.isMoving=!1,t.curAnim()=="idle")return;t.play("afk")}}),t.hurt=s=>{e&&(t.setInvTime(B),t.setHP(t.hp()-s),t.trigger("hurt"))},t.setInvTime=s=>{e=!1,t.wait(s,()=>{e=!0})},t.setInv=s=>{e=!s},t.setInvBulletTime=s=>{t.wait(s,()=>{})},t.setInvBullet=s=>{},t.onHurt(()=>{t.hp()<=0||(shake(4),E([156,23,59]),t.wait(.3,()=>{E(H.foreground)}))}),t.onDeath(()=>{z.startScene("death")}),onKeyPress("space",async()=>{get("bullet").map(l=>{l.radius=l.radius*3})}),t},ue=async()=>{E(H.foreground),await _.init();const o=vec2(center().x,center().y*1.7),n=await de(o),e=vec2(width()/2,height()/2),a=width()/2-16,t=36;add([pos(e),circle(a,{fill:!1}),outline(2,Color.fromArray(p.foreground)),"border"]),n.onUpdate(()=>{if(n.pos.dist(e)>a-t){const S=n.pos.sub(e).unit();n.pos=e.add(S.scale(a-t))}}),Z(h=>{h.pos.dist(e)>a-h.radius&&destroy(h)}),te(),await N(),$();const c=await ie(n,e,a),g=add([text(get("gameManager")[0].score,{font:"Tiny"}),pos(20,20),layer("ui"),color(p.foreground)]);return c.onScoreChange(()=>{g.text=c.score}),{centerPos:e,radius:a}},pe=async o=>{const n=vec2(width()/2,height()/2),e=width()/2-16;add([pos(n),circle(e,{fill:!1}),outline(2,Color.fromArray(p.foreground))]);const a=add([text(`You are dead!
Press space to restart`,{font:"Tiny",align:"center"}),color(p.foreground),pos(center()),anchor("center"),layer("ui"),animate()]);return onKeyPress("space",()=>{z.startScene("test")}),a.animate("scale",[0,1],{duration:.5,loops:1}),o};function he(){loadShader("playerShader",null,`
  precision mediump float;

  uniform float r;
  uniform float g;
  uniform float b;
  uniform float h;
  uniform vec2 texSize;
  uniform vec2 frameOffset;
  uniform vec2 frameSize;

  vec4 frag(vec2 pos, vec2 uv, vec4 color, sampler2D tex) {
      vec4 c = texture2D(tex, uv);

      if (c.a < 0.01) {
          return c;
      }

      vec2 offsetX = vec2(1.0 / texSize.x, 0.0);
      vec2 offsetY = vec2(0.0, 1.0 / texSize.y);

      float alphaUp    = texture2D(tex, uv + offsetY).a;
      float alphaDown  = texture2D(tex, uv - offsetY).a;
      float alphaLeft  = texture2D(tex, uv - offsetX).a;
      float alphaRight = texture2D(tex, uv + offsetX).a;

      if (alphaUp < 0.01 || alphaDown < 0.01 || alphaLeft < 0.01 || alphaRight < 0.01) {
          return vec4(r, g, b, c.a);
      }

      vec2 pixelCoord = uv * texSize;
      vec2 localPixel = pixelCoord - (frameOffset * texSize);
      vec2 localUV = localPixel / frameSize; // 0..1 по фрейму

      if (localUV.y <= h) {
          return vec4(1.0, 0.0, 0.0, 0.0);
      }

      return vec4(r, g, b, c.a);
      }
      `),loadShader("cooldown",null,`
  precision mediump float;

    uniform float r;
  uniform float g;
  uniform float b;
  uniform float h;
  uniform vec2 texSize;

  vec4 frag(vec2 pos, vec2 uv, vec4 color, sampler2D tex) {
      vec4 c = texture2D(tex, uv);

      if (c.a < 0.01) {
          return c;
      }

      vec2 offsetX = vec2(1.0 / texSize.x, 0.0);
      vec2 offsetY = vec2(0.0, 1.0 / texSize.y);

      float alphaUp    = texture2D(tex, uv + offsetY).a;
      float alphaDown  = texture2D(tex, uv - offsetY).a;
      float alphaLeft  = texture2D(tex, uv - offsetX).a;
      float alphaRight = texture2D(tex, uv + offsetX).a;

      if (alphaUp < 0.01 || alphaDown < 0.01 || alphaLeft < 0.01 || alphaRight < 0.01) {
          return vec4(r, g, b, c.a);
      }

      vec2 pixelCoord = uv * texSize;

      if (pixelCoord.y <= h) {
          return vec4(c.r, c.g, c.b, 0.0);
      }

      return vec4(r, g, b, c.a);
      }
      `),loadShader("newTint",null,`
    precision mediump float;

    uniform float r;
    uniform float g;
    uniform float b;

    vec4 frag(vec2 pos, vec2 uv, vec4 color, sampler2D tex) {
      vec4 c = def_frag();

      return vec4(r, g, b, c.a);
    }
    `),loadShader("hollow",null,`
  precision mediump float;

  uniform float r;
  uniform float g;
  uniform float b;
  uniform vec2 texSize;

  vec4 frag(vec2 pos, vec2 uv, vec4 color, sampler2D tex) {
    vec4 c = texture2D(tex, uv);

    if (c.a < 0.1) {
        return c;
    }

    vec2 offsetX = vec2(1.0 / texSize.x, 0.0);
    vec2 offsetY = vec2(0.0, 1.0 / texSize.y);

    float alphaUp    = texture2D(tex, uv + offsetY).a;
    float alphaDown  = texture2D(tex, uv - offsetY).a;
    float alphaLeft  = texture2D(tex, uv - offsetX).a;
    float alphaRight = texture2D(tex, uv + offsetX).a;

    if (alphaUp < 0.01 || alphaDown < 0.01 || alphaLeft < 0.01 || alphaRight < 0.01) {
        return vec4(r, g, b, c.a);
    }

    return vec4(0,0,0,0);
  }
  `)}const X=Y({background:[p.background],width:W,height:G,scale:1,pixelated:!0});K(X);loadFont("Tiny","./fonts/Tiny5-Regular.ttf");he();await J();z.init(X);z.addScene("test",ue);z.addScene("death",pe);z.startScene("test");const fe=document.querySelector("body");fe.style.backgroundColor=rgb(p.background);
//# sourceMappingURL=index-CpJbQ35O.js.map
