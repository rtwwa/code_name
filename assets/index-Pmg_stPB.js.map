{"version":3,"file":"index-Pmg_stPB.js","sources":["../../src/utils/fullscreen.js","../../src/config.js","../../src/app.js","../../src/objects/enemies/spider.js","../../src/objects/enemies/turretAR.js","../../src/objects/enemies/turretART.js","../../src/objects/enemies/turretBT.js","../../src/objects/enemies/turretMISS.js","../../src/objects/upgradeSystem.js","../../src/objects/gameManager.js","../../src/objects/mouse.js","../../src/objects/player/abilities/attack.js","../../src/objects/player/abilities/hook.js","../../src/objects/player/player.js","../../src/scenes/testing_scene.js","../../src/scenes/death.scene.js","../../src/utils/shaders.js","../../src/main.js","../../src/utils/background.js"],"sourcesContent":["function resizeGame(kaplay) {\r\n  const gameCanvas = document.querySelector(\"canvas\");\r\n\r\n  const winWidth = window.innerWidth;\r\n  const winHeight = window.innerHeight;\r\n\r\n  const scaleX = Math.floor(winWidth / kaplay.width);\r\n  const scaleY = Math.floor(winHeight / kaplay.height);\r\n  const scale = Math.max(1, Math.min(scaleX, scaleY));\r\n\r\n  gameCanvas.style.width = kaplay.width * scale + \"px\";\r\n  gameCanvas.style.height = kaplay.height * scale + \"px\";\r\n  gameCanvas.style.imageRendering = \"pixelated\";\r\n  gameCanvas.style.position = \"absolute\";\r\n  gameCanvas.style.top = \"50%\";\r\n  gameCanvas.style.left = \"50%\";\r\n  gameCanvas.style.transform = \"translate(-50%, -50%)\";\r\n}\r\n\r\nfunction goFullscreen() {\r\n  const canvas = document.querySelector(\"canvas\");\r\n  if (canvas.requestFullscreen) {\r\n    canvas.requestFullscreen();\r\n  } else if (canvas.webkitRequestFullscreen) {\r\n    canvas.webkitRequestFullscreen();\r\n  }\r\n}\r\n\r\nexport function fullscreenHandler(kaplay) {\r\n  window.addEventListener(\"resize\", resizeGame(kaplay));\r\n  window.addEventListener(\"load\", resizeGame(kaplay));\r\n\r\n  document.addEventListener(\"keydown\", (e) => {\r\n    if (e.key === \"f\") {\r\n      goFullscreen();\r\n    }\r\n  });\r\n}\r\n","export const GAME_WIDTH = 800;\r\nexport const GAME_HEIGHT = 800;\r\n\r\n// 16:9\r\n\r\n// export const COLORS = {\r\n//   background: [56, 43, 38],\r\n//   foreground: [184, 194, 185],\r\n// };\r\n\r\nexport const DEF_COLORS = {\r\n  background: [34, 42, 61],\r\n  foreground: [237, 242, 226],\r\n  debug: [255, 0, 0],\r\n};\r\n\r\nexport const COLORS = {\r\n  background: [34, 42, 61],\r\n  foreground: [237, 242, 226],\r\n  debug: [255, 0, 0],\r\n};\r\n\r\nexport function setForegroundColor(newColor) {\r\n  COLORS.foreground = newColor;\r\n  const allObj = get(\"*\");\r\n\r\n  allObj.map((obj) => {\r\n    if (obj.color) obj.color = Color.fromArray(newColor);\r\n    if (obj.outline) obj.outline.color = Color.fromArray(newColor);\r\n  });\r\n}\r\n","const App = {\r\n  kaplayInstance: null,\r\n  currentScene: null,\r\n  sceneData: {},\r\n\r\n  init(kaplayInstance) {\r\n    this.kaplayInstance = kaplayInstance;\r\n  },\r\n\r\n  addScene(name, sceneFunc) {\r\n    if (!this.kaplayInstance) {\r\n      console.error(\"Kaplay instance не инициализирован\");\r\n      return;\r\n    }\r\n\r\n    this.kaplayInstance.scene(name, () => {\r\n      const data = sceneFunc();\r\n      this.sceneData[name] = data;\r\n      return data;\r\n    });\r\n  },\r\n\r\n  startScene(name) {\r\n    if (!this.kaplayInstance) {\r\n      console.error(\"Kaplay instance не инициализирован\");\r\n      return;\r\n    }\r\n\r\n    this.currentScene = name;\r\n    this.kaplayInstance.go(name);\r\n  },\r\n\r\n  getCurrentSceneData() {\r\n    return this.sceneData[this.currentScene];\r\n  },\r\n};\r\n\r\nexport default App;\r\n","import { COLORS } from \"../../config\";\r\n\r\nexport async function loadSpider() {\r\n  await loadSprite(\"spider\", \"./sprites/spider.png\");\r\n}\r\n\r\nexport const SPIDER_STATS = {\r\n  size: 10,\r\n  speed: 200,\r\n  moveInterval: 1.5,\r\n  damage: 1,\r\n  aggroRange: 200,\r\n  travelRange: 200,\r\n  hp: 1,\r\n  deathPartsCount: 50,\r\n  deathPartsSpeed: [300, 10],\r\n  deathPartsLife: 0.4,\r\n  deathShake: 2,\r\n  deathScore: 10,\r\n};\r\n\r\nexport function spawnSpider(position, centerPos, radius, options = {}) {\r\n  const {\r\n    size = SPIDER_STATS.size,\r\n    speed = SPIDER_STATS.speed,\r\n    moveInterval = SPIDER_STATS.moveInterval,\r\n    damage = SPIDER_STATS.damage,\r\n    aggroRange = SPIDER_STATS.aggroRange,\r\n    travelRange = SPIDER_STATS.travelRange,\r\n    hp = SPIDER_STATS.hp,\r\n    deathPartsCount = SPIDER_STATS.deathPartsCount,\r\n    deathPartsSpeed = SPIDER_STATS.deathPartsSpeed,\r\n    deathPartsLife = SPIDER_STATS.deathPartsLife,\r\n    deathShake = SPIDER_STATS.deathShake,\r\n    deathScore = SPIDER_STATS.deathScore,\r\n  } = options;\r\n  let dist = position;\r\n\r\n  const spider = add([\r\n    sprite(\"spider\"),\r\n    pos(position),\r\n    color(COLORS.foreground),\r\n    area(),\r\n    body(),\r\n    health(hp),\r\n    anchor(\"center\"),\r\n    \"enemy\",\r\n    \"spider\",\r\n    {\r\n      damage,\r\n      speed,\r\n      size,\r\n    },\r\n  ]);\r\n\r\n  function newDist() {\r\n    const player = get(\"player\")[0];\r\n    if (player) {\r\n      const distance = spider.pos.dist(player.pos);\r\n\r\n      if (distance < aggroRange && distance > player.width + size) {\r\n        dist = vec2(player.pos.x, player.pos.y);\r\n        spider.moveTo(dist, speed);\r\n        return;\r\n      }\r\n    }\r\n\r\n    dist = getRandomDist();\r\n\r\n    const distFromCenter = dist.dist(centerPos);\r\n    if (distFromCenter > radius - size) {\r\n      dist = center();\r\n    }\r\n  }\r\n\r\n  function getRandomDist() {\r\n    return vec2(\r\n      spider.pos.x + rand(-travelRange, travelRange),\r\n      spider.pos.y + rand(-travelRange, travelRange)\r\n    );\r\n  }\r\n\r\n  function moveHandler() {\r\n    spider.moveTo(dist, speed);\r\n  }\r\n\r\n  loop(moveInterval, () => {\r\n    newDist();\r\n  });\r\n\r\n  spider.onUpdate(() => {\r\n    // drawCircle({\r\n    //   pos: spider.pos,\r\n    //   radius: aggroRange,\r\n    //   fill: false,\r\n    //   outline: { color: rgb(COLORS.debug) },\r\n    // });\r\n\r\n    // drawCircle({\r\n    //   pos: centerPos,\r\n    //   radius: radius - spider.size * 2,\r\n    //   color: rgb(COLORS.debug),\r\n    //   outline: { color: rgb(COLORS.debug) },\r\n    // });\r\n\r\n    moveHandler();\r\n  });\r\n\r\n  spider.onHurt(() => {\r\n    if (spider.hp() <= 0) return;\r\n\r\n    const death = add([\r\n      pos(spider.pos),\r\n      particles(\r\n        {\r\n          max: deathPartsCount,\r\n          speed: deathPartsSpeed,\r\n          angle: [0, 360],\r\n          angularVelocity: [45, 90],\r\n          lifeTime: [deathPartsLife, deathPartsLife],\r\n          colors: [rgb(COLORS.foreground)],\r\n          texture: getSprite(\"deathParticlies\").data.tex,\r\n          quads: [getSprite(\"deathParticlies\").data.frames[0]],\r\n        },\r\n        {\r\n          lifetime: deathPartsLife,\r\n          rate: 0,\r\n          direction: 0,\r\n          spread: 180,\r\n        }\r\n      ),\r\n      timer(),\r\n    ]);\r\n\r\n    death.emit(deathPartsCount / 3);\r\n    shake(Math.max(deathShake / 3, 1));\r\n\r\n    death.wait(deathPartsLife * 2, () => {\r\n      destroy(death);\r\n    });\r\n  });\r\n\r\n  spider.onDeath(() => {\r\n    const death = add([\r\n      pos(spider.pos),\r\n      particles(\r\n        {\r\n          max: deathPartsCount,\r\n          speed: deathPartsSpeed,\r\n          angle: [0, 360],\r\n          angularVelocity: [45, 90],\r\n          lifeTime: [deathPartsLife, deathPartsLife],\r\n          colors: [rgb(COLORS.foreground)],\r\n          texture: getSprite(\"deathParticlies\").data.tex,\r\n          quads: [getSprite(\"deathParticlies\").data.frames[0]],\r\n        },\r\n        {\r\n          lifetime: deathPartsLife,\r\n          rate: 0,\r\n          direction: 0,\r\n          spread: 180,\r\n        }\r\n      ),\r\n      timer(),\r\n    ]);\r\n\r\n    death.emit(deathPartsCount);\r\n    shake(deathShake);\r\n    destroy(spider);\r\n\r\n    death.wait(deathPartsLife * 2, () => {\r\n      destroy(death);\r\n    });\r\n    get(\"gameManager\")[0].addScore(deathScore);\r\n  });\r\n\r\n  return spider;\r\n}\r\n\r\nexport function setupSpiderLogic() {\r\n  onCollide(\"spider\", \"player\", (spider, player) => {\r\n    player.hurt(spider.damage);\r\n  });\r\n}\r\n","import { COLORS } from \"../../config\";\r\n\r\nexport async function loadTurret() {\r\n  await loadSprite(\"button\", \"./sprites/button.png\");\r\n  await loadSprite(\"dropArea\", \"./sprites/dropArea.png\");\r\n  await loadSprite(\"turretAR\", \"./sprites/turretAR.png\");\r\n  await loadSprite(\"turretMISS\", \"./sprites/turretMISS.png\");\r\n  await loadSprite(\"turretBT\", \"./sprites/turretBT.png\");\r\n  await loadSprite(\"turretART\", \"./sprites/turretART.png\");\r\n  await loadSprite(\"deathParticlies\", \"./sprites/dust.png\");\r\n}\r\n\r\nexport const TURRET_STATS_AR = {\r\n  bulletCount: 12,\r\n  bulletSpeed: 150,\r\n  hp: 1,\r\n  damage: 1,\r\n  shootInterval: 2,\r\n  bulletSize: 6,\r\n  deathPartsCount: 150,\r\n  deathPartsSpeed: [300, 10],\r\n  deathPartsLife: 0.4,\r\n  deathShake: 3,\r\n  deathScore: 20,\r\n};\r\n\r\nexport function createTurretSpawnerAR(defaults = {}) {\r\n  const spawnerDefaults = add([{ ...TURRET_STATS_AR }, \"sTurretAR\"]);\r\n\r\n  spawnerDefaults.spawn = (position, options = {}) => {\r\n    const {\r\n      bulletCount = spawnerDefaults.bulletCount,\r\n      bulletSpeed = spawnerDefaults.bulletSpeed,\r\n      hp = spawnerDefaults.hp,\r\n      damage = spawnerDefaults.damage,\r\n      shootInterval = spawnerDefaults.shootInterval,\r\n      bulletSize = spawnerDefaults.bulletSize,\r\n      deathPartsCount = spawnerDefaults.deathPartsCount,\r\n      deathPartsSpeed = spawnerDefaults.deathPartsSpeed,\r\n      deathPartsLife = spawnerDefaults.deathPartsLife,\r\n      deathShake = spawnerDefaults.deathShake,\r\n      deathScore = spawnerDefaults.deathScore,\r\n    } = options;\r\n\r\n    const turret = add([\r\n      sprite(\"turretAR\"),\r\n      pos(position),\r\n      area(),\r\n      body(),\r\n      health(hp),\r\n      color(COLORS.foreground),\r\n      anchor(\"center\"),\r\n      \"enemy\",\r\n      {\r\n        bulletCount,\r\n        bulletSpeed,\r\n        damage,\r\n        shootInterval,\r\n      },\r\n    ]);\r\n\r\n    function shootCircle() {\r\n      for (let i = 0; i < turret.bulletCount; i++) {\r\n        const angle = (i / turret.bulletCount) * Math.PI * 2;\r\n        const dir = vec2(Math.cos(angle), Math.sin(angle));\r\n\r\n        add([\r\n          circle(bulletSize),\r\n          pos(turret.pos),\r\n          color(COLORS.foreground),\r\n          area(),\r\n          \"bullet\",\r\n          { dir, speed: turret.bulletSpeed, damage: turret.damage },\r\n        ]);\r\n      }\r\n    }\r\n\r\n    const shootLoop = loop(turret.shootInterval, shootCircle);\r\n\r\n    turret.onHurt(() => {\r\n      if (turret.hp() <= 0) return;\r\n\r\n      const death = add([\r\n        pos(turret.pos),\r\n        particles(\r\n          {\r\n            max: deathPartsCount,\r\n            speed: deathPartsSpeed,\r\n            angle: [0, 360],\r\n            angularVelocity: [45, 90],\r\n            lifeTime: [deathPartsLife, deathPartsLife],\r\n            colors: [rgb(COLORS.foreground)],\r\n            texture: getSprite(\"deathParticlies\").data.tex,\r\n            quads: [getSprite(\"deathParticlies\").data.frames[0]],\r\n          },\r\n          {\r\n            lifetime: deathPartsLife,\r\n            rate: 0,\r\n            direction: 0,\r\n            spread: 180,\r\n          }\r\n        ),\r\n        timer(),\r\n      ]);\r\n\r\n      death.emit(deathPartsCount / 3);\r\n      shake(Math.max(deathShake / 3, 1));\r\n\r\n      death.wait(deathPartsLife * 2, () => destroy(death));\r\n    });\r\n\r\n    turret.onDestroy(() => {\r\n      shootLoop.cancel();\r\n      destroy(turret);\r\n    });\r\n\r\n    turret.onDeath(() => {\r\n      const death = add([\r\n        pos(turret.pos),\r\n        particles(\r\n          {\r\n            max: deathPartsCount,\r\n            speed: deathPartsSpeed,\r\n            angle: [0, 360],\r\n            angularVelocity: [45, 90],\r\n            lifeTime: [deathPartsLife, deathPartsLife],\r\n            colors: [rgb(COLORS.foreground)],\r\n            texture: getSprite(\"deathParticlies\").data.tex,\r\n            quads: [getSprite(\"deathParticlies\").data.frames[0]],\r\n          },\r\n          {\r\n            lifetime: deathPartsLife,\r\n            rate: 0,\r\n            direction: 0,\r\n            spread: 180,\r\n          }\r\n        ),\r\n        timer(),\r\n      ]);\r\n\r\n      death.emit(deathPartsCount);\r\n      shake(deathShake);\r\n      shootLoop.cancel();\r\n      destroy(turret);\r\n\r\n      death.wait(deathPartsLife * 2, () => destroy(death));\r\n\r\n      get(\"gameManager\")[0].addScore(deathScore);\r\n    });\r\n\r\n    return turret;\r\n  };\r\n\r\n  return spawnerDefaults;\r\n}\r\n\r\n// Логика пуль остаётся прежней\r\nexport function setupBulletLogic(destroyBulletFunc) {\r\n  onUpdate(\"bullet\", (b) => {\r\n    b.move(b.dir.scale(b.speed));\r\n    destroyBulletFunc(b);\r\n  });\r\n\r\n  onCollide(\"bullet\", \"player\", (bullet, player) => {\r\n    destroy(bullet);\r\n    player.hurt(bullet.damage);\r\n  });\r\n}\r\n","import App from \"../../app\";\r\nimport { COLORS } from \"../../config\";\r\n\r\nexport const TURRET_STATS_ART = {\r\n  bulletCount: 6,\r\n  bulletSpeed: 200,\r\n  hp: 1,\r\n  damage: 1,\r\n  shootInterval: 2,\r\n  dropTime: 2,\r\n  explosionSize: 75,\r\n  deathPartsCount: 150,\r\n  deathPartsSpeed: [300, 10],\r\n  deathPartsLife: 0.4,\r\n  deathShake: 3,\r\n  deathScore: 20,\r\n};\r\n\r\nexport function createTurretSpawnerART(position, options = {}) {\r\n  const spawnerDefaults = add([{ ...TURRET_STATS_ART }, \"sTurretART\"]);\r\n\r\n  spawnerDefaults.spawn = (position, options = {}) => {\r\n    const {\r\n      bulletCount = spawnerDefaults.bulletCount,\r\n      bulletSpeed = spawnerDefaults.bulletSpeed,\r\n      hp = spawnerDefaults.hp,\r\n      damage = spawnerDefaults.damage,\r\n      shootInterval = spawnerDefaults.shootInterval,\r\n      dropTime = spawnerDefaults.dropTime,\r\n      explosionSize = spawnerDefaults.explosionSize,\r\n      deathPartsCount = spawnerDefaults.deathPartsCount,\r\n      deathPartsSpeed = spawnerDefaults.deathPartsSpeed,\r\n      deathPartsLife = spawnerDefaults.deathPartsLife,\r\n      deathShake = spawnerDefaults.deathShake,\r\n      deathScore = spawnerDefaults.deathScore,\r\n    } = options;\r\n\r\n    const turret = add([\r\n      sprite(\"turretART\"),\r\n      pos(position),\r\n      area(),\r\n      body(),\r\n      health(hp),\r\n      color(COLORS.foreground),\r\n      anchor(\"center\"),\r\n      \"enemy\",\r\n      {\r\n        bulletCount,\r\n        bulletSpeed,\r\n        damage,\r\n        shootInterval,\r\n      },\r\n    ]);\r\n\r\n    function shoot() {\r\n      const dropPos = get(\"player\")[0].pos;\r\n\r\n      const missleArea = add([\r\n        sprite(\"dropArea\"),\r\n        pos(dropPos),\r\n        color(COLORS.foreground),\r\n        anchor(\"center\"),\r\n        timer(),\r\n        \"dropArea\",\r\n      ]);\r\n\r\n      missleArea.wait(dropTime, () => {\r\n        destroy(missleArea);\r\n\r\n        const explosion = add([\r\n          circle(explosionSize),\r\n          pos(dropPos),\r\n          color(COLORS.foreground),\r\n          area(),\r\n          timer(),\r\n          \"explosion\",\r\n          { damage: damage },\r\n        ]);\r\n\r\n        explosion.wait(0.2, () => {\r\n          destroy(explosion);\r\n        });\r\n      });\r\n    }\r\n\r\n    const shootLoop = loop(turret.shootInterval, () => {\r\n      shoot();\r\n    });\r\n\r\n    turret.onHurt(() => {\r\n      if (turret.hp() == Infinity) return;\r\n      if (turret.hp() <= 0) return;\r\n\r\n      const death = add([\r\n        pos(turret.pos),\r\n        particles(\r\n          {\r\n            max: deathPartsCount,\r\n            speed: deathPartsSpeed,\r\n            angle: [0, 360],\r\n            angularVelocity: [45, 90],\r\n            lifeTime: [deathPartsLife, deathPartsLife],\r\n            colors: [rgb(COLORS.foreground)],\r\n            texture: getSprite(\"deathParticlies\").data.tex,\r\n            quads: [getSprite(\"deathParticlies\").data.frames[0]],\r\n          },\r\n          {\r\n            lifetime: deathPartsLife,\r\n            rate: 0,\r\n            direction: 0,\r\n            spread: 180,\r\n          }\r\n        ),\r\n        timer(),\r\n      ]);\r\n\r\n      death.emit(deathPartsCount / 3);\r\n      shake(Math.max(deathShake / 3, 1));\r\n\r\n      death.wait(deathPartsLife * 2, () => {\r\n        destroy(death);\r\n      });\r\n    });\r\n\r\n    turret.onDestroy(() => {\r\n      shootLoop.cancel();\r\n      destroy(turret);\r\n      get(\"dropArea\").map((obj) => {\r\n        destroy(obj);\r\n      });\r\n      get(\"explosion\").map((obj) => {\r\n        destroy(obj);\r\n      });\r\n    });\r\n\r\n    turret.onDeath(() => {\r\n      const death = add([\r\n        pos(turret.pos),\r\n        particles(\r\n          {\r\n            max: deathPartsCount,\r\n            speed: deathPartsSpeed,\r\n            angle: [0, 360],\r\n            angularVelocity: [45, 90],\r\n            lifeTime: [deathPartsLife, deathPartsLife],\r\n            colors: [rgb(COLORS.foreground)],\r\n            texture: getSprite(\"deathParticlies\").data.tex,\r\n            quads: [getSprite(\"deathParticlies\").data.frames[0]],\r\n          },\r\n          {\r\n            lifetime: deathPartsLife,\r\n            rate: 0,\r\n            direction: 0,\r\n            spread: 180,\r\n          }\r\n        ),\r\n        timer(),\r\n      ]);\r\n\r\n      death.emit(deathPartsCount);\r\n      shake(deathShake);\r\n      shootLoop.cancel();\r\n      destroy(turret);\r\n\r\n      death.wait(deathPartsLife * 2, () => {\r\n        destroy(death);\r\n      });\r\n\r\n      get(\"gameManager\")[0].addScore(deathScore);\r\n    });\r\n\r\n    return turret;\r\n  };\r\n\r\n  return spawnerDefaults;\r\n}\r\n\r\nexport function setupExplosionDamageLogic() {\r\n  onCollide(\"player\", \"explosion\", (player, explosion) => {\r\n    player.hurt(explosion.damage);\r\n  });\r\n}\r\n","import { COLORS } from \"../../config\";\r\n\r\nexport const TURRET_STATS_BT = {\r\n  bulletCount: 3,\r\n  bulletSpeed: 200,\r\n  hp: 1,\r\n  damage: 1,\r\n  shootInterval: 2,\r\n  size: 24,\r\n  bulletSize: 6,\r\n  deathPartsCount: 150,\r\n  deathPartsSpeed: [300, 10],\r\n  deathPartsLife: 0.4,\r\n  deathShake: 3,\r\n  deathScore: 20,\r\n};\r\n\r\nexport function createTurretSpawnerBT(position, buttonPosition, options = {}) {\r\n  const spawnerDefaults = add([{ ...TURRET_STATS_BT }, \"sTurretBT\"]);\r\n\r\n  spawnerDefaults.spawn = (position, buttonPosition, options = {}) => {\r\n    const {\r\n      bulletCount = spawnerDefaults.bulletCount,\r\n      bulletSpeed = spawnerDefaults.bulletSpeed,\r\n      hp = spawnerDefaults.hp,\r\n      damage = spawnerDefaults.damage,\r\n      shootInterval = spawnerDefaults.shootInterval,\r\n      size = spawnerDefaults.size,\r\n      bulletSize = spawnerDefaults.bulletSize,\r\n      deathPartsCount = spawnerDefaults.deathPartsCount,\r\n      deathPartsSpeed = spawnerDefaults.deathPartsSpeed,\r\n      deathPartsLife = spawnerDefaults.deathPartsLife,\r\n      deathShake = spawnerDefaults.deathShake,\r\n      deathScore = spawnerDefaults.deathScore,\r\n    } = options;\r\n\r\n    const turret = add([\r\n      sprite(\"turretBT\"),\r\n      pos(position),\r\n      area(),\r\n      body(),\r\n      health(Infinity),\r\n      color(COLORS.foreground),\r\n      anchor(\"center\"),\r\n      \"enemy\",\r\n      {\r\n        bulletCount,\r\n        bulletSpeed,\r\n        damage,\r\n        shootInterval,\r\n      },\r\n    ]);\r\n\r\n    const button = add([\r\n      sprite(\"button\"),\r\n      pos(buttonPosition),\r\n      area(),\r\n      body(),\r\n      color(COLORS.foreground),\r\n      anchor(\"center\"),\r\n      \"enemy\",\r\n    ]);\r\n\r\n    turret.use(\r\n      shader(\"hollow\", () => ({\r\n        r: COLORS.foreground.at(0) / 255,\r\n        g: COLORS.foreground.at(1) / 255,\r\n        b: COLORS.foreground.at(2) / 255,\r\n        texSize: vec2(\r\n          getSprite(\"turretBT\").data.tex.width,\r\n          getSprite(\"turretBT\").data.tex.height\r\n        ),\r\n      }))\r\n    );\r\n\r\n    button.onCollide(\"player\", () => {\r\n      turret.shader = null;\r\n      turret.setHP(hp);\r\n      destroy(button);\r\n    });\r\n\r\n    function shoot() {\r\n      const playerPos = get(\"player\")[0].pos;\r\n      const dir = playerPos.sub(turret.pos).unit();\r\n\r\n      const spread = Math.PI / 5;\r\n      const count = turret.bulletCount;\r\n      const startAngle = -spread / 2;\r\n      const step = spread / (count - 1);\r\n\r\n      for (let i = 0; i < count; i++) {\r\n        const angle = startAngle + i * step;\r\n\r\n        const rotatedDir = vec2(\r\n          dir.x * Math.cos(angle) - dir.y * Math.sin(angle),\r\n          dir.x * Math.sin(angle) + dir.y * Math.cos(angle)\r\n        ).unit();\r\n\r\n        add([\r\n          circle(bulletSize),\r\n          pos(turret.pos),\r\n          color(COLORS.foreground),\r\n          area(),\r\n          \"bullet\",\r\n          { dir: rotatedDir, speed: turret.bulletSpeed, damage: turret.damage },\r\n        ]);\r\n      }\r\n    }\r\n\r\n    const shootLoop = loop(turret.shootInterval, () => {\r\n      shoot();\r\n    });\r\n\r\n    turret.onHurt(() => {\r\n      if (turret.hp() == Infinity) return;\r\n      if (turret.hp() <= 0) return;\r\n\r\n      const death = add([\r\n        pos(turret.pos),\r\n        particles(\r\n          {\r\n            max: deathPartsCount,\r\n            speed: deathPartsSpeed,\r\n            angle: [0, 360],\r\n            angularVelocity: [45, 90],\r\n            lifeTime: [deathPartsLife, deathPartsLife],\r\n            colors: [rgb(COLORS.foreground)],\r\n            texture: getSprite(\"deathParticlies\").data.tex,\r\n            quads: [getSprite(\"deathParticlies\").data.frames[0]],\r\n          },\r\n          {\r\n            lifetime: deathPartsLife,\r\n            rate: 0,\r\n            direction: 0,\r\n            spread: 180,\r\n          }\r\n        ),\r\n        timer(),\r\n      ]);\r\n\r\n      death.emit(deathPartsCount / 3);\r\n      shake(Math.max(deathShake / 3, 1));\r\n\r\n      death.wait(deathPartsLife * 2, () => {\r\n        destroy(death);\r\n      });\r\n    });\r\n\r\n    turret.onDestroy(() => {\r\n      shootLoop.cancel();\r\n      destroy(turret);\r\n    });\r\n\r\n    turret.onDeath(() => {\r\n      const death = add([\r\n        pos(turret.pos),\r\n        particles(\r\n          {\r\n            max: deathPartsCount,\r\n            speed: deathPartsSpeed,\r\n            angle: [0, 360],\r\n            angularVelocity: [45, 90],\r\n            lifeTime: [deathPartsLife, deathPartsLife],\r\n            colors: [rgb(COLORS.foreground)],\r\n            texture: getSprite(\"deathParticlies\").data.tex,\r\n            quads: [getSprite(\"deathParticlies\").data.frames[0]],\r\n          },\r\n          {\r\n            lifetime: deathPartsLife,\r\n            rate: 0,\r\n            direction: 0,\r\n            spread: 180,\r\n          }\r\n        ),\r\n        timer(),\r\n      ]);\r\n\r\n      death.emit(deathPartsCount);\r\n      shake(deathShake);\r\n      shootLoop.cancel();\r\n      destroy(turret);\r\n\r\n      death.wait(deathPartsLife * 2, () => {\r\n        destroy(death);\r\n      });\r\n\r\n      get(\"gameManager\")[0].addScore(deathScore);\r\n    });\r\n\r\n    return turret;\r\n  };\r\n\r\n  return spawnerDefaults;\r\n}\r\n","import { COLORS } from \"../../config\";\r\n\r\nexport const TURRET_STATS_MISS = {\r\n  bulletCount: 1,\r\n  bulletSpeed: 150,\r\n  hp: 1,\r\n  damage: 1,\r\n  shootTimes: 1,\r\n  shootIntervalShort: 0.1,\r\n  shootIntervalLong: 3,\r\n  bulletSize: 6,\r\n  deathPartsCount: 150,\r\n  deathPartsSpeed: [300, 10],\r\n  deathPartsLife: 0.4,\r\n  deathShake: 3,\r\n  deathScore: 20,\r\n};\r\n\r\nexport function createTurretSpawnerMISS(position, options = {}) {\r\n  const spawnerDefaults = add([{ ...TURRET_STATS_MISS }, \"sTurretMISS\"]);\r\n\r\n  spawnerDefaults.spawn = (position, options = {}) => {\r\n    const {\r\n      bulletCount = spawnerDefaults.bulletCount,\r\n      bulletSpeed = spawnerDefaults.bulletSpeed,\r\n      hp = spawnerDefaults.hp,\r\n      damage = spawnerDefaults.damage,\r\n      shootTimes = spawnerDefaults.shootTimes,\r\n      shootIntervalShort = spawnerDefaults.shootIntervalShort,\r\n      shootIntervalLong = spawnerDefaults.shootIntervalLong,\r\n      bulletSize = spawnerDefaults.bulletSize,\r\n      deathPartsCount = spawnerDefaults.deathPartsCount,\r\n      deathPartsSpeed = spawnerDefaults.deathPartsSpeed,\r\n      deathPartsLife = spawnerDefaults.deathPartsLife,\r\n      deathShake = spawnerDefaults.deathShake,\r\n      deathScore = spawnerDefaults.deathScore,\r\n    } = options;\r\n\r\n    const turret = add([\r\n      sprite(\"turretMISS\"),\r\n      pos(position),\r\n      area(),\r\n      body(),\r\n      health(hp),\r\n      color(COLORS.foreground),\r\n      anchor(\"center\"),\r\n      timer(),\r\n      \"enemy\",\r\n      {\r\n        bulletCount,\r\n        bulletSpeed,\r\n        damage,\r\n      },\r\n    ]);\r\n\r\n    function shoot() {\r\n      const spread = Math.PI / 8;\r\n      const count = 2;\r\n      const startAngle = -spread / 2;\r\n      const step = spread / (count - 1);\r\n\r\n      for (let j = 0; j < shootTimes; j++) {\r\n        turret.wait(shootIntervalShort * j, () => {\r\n          for (let i = 0; i < count; i++) {\r\n            const playerPos = get(\"player\")[0].pos;\r\n            const dir = playerPos.sub(turret.pos).unit();\r\n            const angle = startAngle + i * step;\r\n\r\n            const rotatedDir = vec2(\r\n              dir.x * Math.cos(angle) - dir.y * Math.sin(angle),\r\n              dir.x * Math.sin(angle) + dir.y * Math.cos(angle)\r\n            ).unit();\r\n\r\n            add([\r\n              circle(bulletSize),\r\n              pos(turret.pos),\r\n              color(COLORS.foreground),\r\n              area(),\r\n              \"bullet\",\r\n              {\r\n                dir: rotatedDir,\r\n                speed: turret.bulletSpeed,\r\n                damage: turret.damage,\r\n              },\r\n            ]);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    const shootLoop = loop(shootIntervalLong, () => {\r\n      shoot();\r\n    });\r\n\r\n    turret.onHurt(() => {\r\n      if (turret.hp() <= 0) return;\r\n\r\n      const death = add([\r\n        pos(turret.pos),\r\n        particles(\r\n          {\r\n            max: deathPartsCount,\r\n            speed: deathPartsSpeed,\r\n            angle: [0, 360],\r\n            angularVelocity: [45, 90],\r\n            lifeTime: [deathPartsLife, deathPartsLife],\r\n            colors: [rgb(COLORS.foreground)],\r\n            texture: getSprite(\"deathParticlies\").data.tex,\r\n            quads: [getSprite(\"deathParticlies\").data.frames[0]],\r\n          },\r\n          {\r\n            lifetime: deathPartsLife,\r\n            rate: 0,\r\n            direction: 0,\r\n            spread: 180,\r\n          }\r\n        ),\r\n        timer(),\r\n      ]);\r\n\r\n      death.emit(deathPartsCount / 3);\r\n      shake(Math.max(deathShake / 3, 1));\r\n\r\n      death.wait(deathPartsLife * 2, () => {\r\n        destroy(death);\r\n      });\r\n    });\r\n\r\n    turret.onDestroy(() => {\r\n      shootLoop.cancel();\r\n      destroy(turret);\r\n    });\r\n\r\n    turret.onDeath(() => {\r\n      const death = add([\r\n        pos(turret.pos),\r\n        particles(\r\n          {\r\n            max: deathPartsCount,\r\n            speed: deathPartsSpeed,\r\n            angle: [0, 360],\r\n            angularVelocity: [45, 90],\r\n            lifeTime: [deathPartsLife, deathPartsLife],\r\n            colors: [rgb(COLORS.foreground)],\r\n            texture: getSprite(\"deathParticlies\").data.tex,\r\n            quads: [getSprite(\"deathParticlies\").data.frames[0]],\r\n          },\r\n          {\r\n            lifetime: deathPartsLife,\r\n            rate: 0,\r\n            direction: 0,\r\n            spread: 180,\r\n          }\r\n        ),\r\n        timer(),\r\n      ]);\r\n\r\n      death.emit(deathPartsCount);\r\n      shake(deathShake);\r\n      shootLoop.cancel();\r\n      destroy(turret);\r\n\r\n      death.wait(deathPartsLife * 2, () => {\r\n        destroy(death);\r\n      });\r\n\r\n      get(\"gameManager\")[0].addScore(deathScore);\r\n    });\r\n\r\n    return turret;\r\n  };\r\n\r\n  return spawnerDefaults;\r\n}\r\n","import { DEF_COLORS } from \"../config\";\r\nimport { TURRET_STATS_AR } from \"./enemies/turretAR\";\r\nimport { TURRET_STATS_ART } from \"./enemies/turretART\";\r\nimport { TURRET_STATS_BT } from \"./enemies/turretBT\";\r\nimport { TURRET_STATS_MISS } from \"./enemies/turretMISS\";\r\n\r\nexport async function createUpgradeSystem(player, centerPos, radius) {\r\n  const defIcon = await loadSprite(\"upgrade\", \"./sprites/upgrade.png\");\r\n\r\n  const upgrade = add([timer(), \"upgradeSystem\"]);\r\n  const hb = await player.hookAbility;\r\n  const ab = await player.attackAbility;\r\n\r\n  upgrade.ar = get(\"sTurretAR\")[0];\r\n  upgrade.art = get(\"sTurretART\")[0];\r\n  upgrade.bt = get(\"sTurretBT\")[0];\r\n  upgrade.miss = get(\"sTurretMISS\")[0];\r\n\r\n  upgrade.upgrades = [];\r\n  upgrade.getRandomUpgrade = () => {\r\n    if (upgrade.upgrades.length === 0) return;\r\n\r\n    return upgrade.upgrades[\r\n      Math.floor(Math.random() * upgrade.upgrades.length)\r\n    ];\r\n  };\r\n\r\n  upgrade.openUpgradeWindow = async (t) => {\r\n    hb.endPos = null;\r\n    hb.isRopeActive = false;\r\n    hb.currentCooldown = 0;\r\n    player.moveTo(vec2(center().x, center().y + 100));\r\n    const f1 = upgrade.getRandomUpgrade();\r\n    const f2 = upgrade.getRandomUpgrade();\r\n\r\n    const x = add([\r\n      sprite(f1.s),\r\n      pos(vec2(center().x - 150, center().y - 100)),\r\n      area(),\r\n      anchor(\"center\"),\r\n      animate(),\r\n      timer(),\r\n      \"upgrade\",\r\n      { ...f1, t },\r\n    ]);\r\n\r\n    const xtext = x.add([\r\n      text(x.text, { size: 24, font: \"Tiny\", align: \"center\" }),\r\n      pos(-75, 45),\r\n      layer(\"ui\"),\r\n      color(DEF_COLORS.foreground),\r\n    ]);\r\n\r\n    const y = add([\r\n      sprite(f2.s),\r\n      pos(vec2(center().x + 150, center().y - 100)),\r\n      area(),\r\n      anchor(\"center\"),\r\n      animate(),\r\n      timer(),\r\n      \"upgrade\",\r\n      { ...f2, t },\r\n    ]);\r\n\r\n    const ytext = y.add([\r\n      text(y.text, { size: 24, font: \"Tiny\", align: \"center\" }),\r\n      pos(-75, 45),\r\n      layer(\"ui\"),\r\n      color(DEF_COLORS.foreground),\r\n    ]);\r\n  };\r\n\r\n  onCollide(\"player\", \"upgrade\", (p, u) => {\r\n    u.callback();\r\n\r\n    u.animate(\"scale\", [vec2(1, 1), vec2(0, 0)], {\r\n      duration: 0.2,\r\n      direction: \"forward\",\r\n      loops: 1,\r\n    });\r\n    u.animation.seek(0);\r\n\r\n    u.wait(0.3, () => {\r\n      get(\"upgrade\").map((obj) => {\r\n        destroy(obj);\r\n        u.t.paused = false;\r\n      });\r\n    });\r\n  });\r\n\r\n  upgrade.upgrades.push({\r\n    s: defIcon,\r\n    text: \"Reduces hook\\n cooldown by 20%\",\r\n    callback: () => {\r\n      hb.hookCooldown = hb.hookCooldown * 0.8;\r\n    },\r\n  });\r\n\r\n  upgrade.upgrades.push({\r\n    s: defIcon,\r\n    text: \"full hp\",\r\n    callback: () => {\r\n      player.setHP(player.maxHP());\r\n    },\r\n  });\r\n\r\n  upgrade.upgrades.push({\r\n    s: defIcon,\r\n    text: \"+3 max hp\\n+3 hp\",\r\n    callback: () => {\r\n      player.setMaxHP(player.maxHP() + 3);\r\n      player.setHP(player.hp() + 3);\r\n    },\r\n  });\r\n\r\n  upgrade.upgrades.push({\r\n    s: defIcon,\r\n    text: \"Reduces the firing rate\\nof all enemies by 30%\\n(except spiders)\\n but adds +1 HP to them.\",\r\n    callback: () => {\r\n      upgrade.ar.shootInterval = upgrade.ar.shootInterval * 1.3;\r\n      upgrade.ar.hp = upgrade.ar.hp + 1;\r\n\r\n      upgrade.art.shootInterval = upgrade.art.shootInterval * 1.3;\r\n      upgrade.art.hp = upgrade.art.hp + 1;\r\n\r\n      upgrade.bt.shootInterval = upgrade.bt.shootInterval * 1.3;\r\n      upgrade.bt.hp = upgrade.bt.hp + 1;\r\n\r\n      upgrade.miss.shootIntervalLong = upgrade.miss.shootIntervalLong * 1.3;\r\n      upgrade.miss.hp = upgrade.miss.hp + 1;\r\n    },\r\n  });\r\n\r\n  upgrade.upgrades.push({\r\n    s: defIcon,\r\n    text: \"Reduces bullet size by 30%\\nbut adds +1 damage to them\",\r\n    callback: () => {\r\n      upgrade.ar.bulletSize = upgrade.ar.bulletSize * 0.2;\r\n      upgrade.ar.damage = upgrade.ar.damage + 1;\r\n\r\n      upgrade.art.bulletSize = upgrade.art.bulletSize * 0.2;\r\n      upgrade.art.damage = upgrade.art.damage + 1;\r\n\r\n      upgrade.bt.bulletSize = upgrade.bt.bulletSize * 0.2;\r\n      upgrade.bt.damage = upgrade.bt.damage + 1;\r\n\r\n      upgrade.miss.bulletSize = upgrade.miss.bulletSize * 0.2;\r\n      upgrade.miss.damage = upgrade.miss.damage + 1;\r\n    },\r\n  });\r\n\r\n  upgrade.upgrades.push({\r\n    s: defIcon,\r\n    text: \"Reduces attack\\n cooldown by 20%\",\r\n    callback: () => {\r\n      ab.attackCooldown = ab.attackCooldown * 0.8;\r\n    },\r\n  });\r\n\r\n  upgrade.upgrades.push({\r\n    s: defIcon,\r\n    text: \"increase player\\nmovement speed by 15%\",\r\n    callback: () => {\r\n      player.speed = player.speed * 1.15;\r\n    },\r\n  });\r\n\r\n  upgrade.upgrades.push({\r\n    s: defIcon,\r\n    text: \"increase attack\\n damage by 1\\n but also increase\\n cooldown by 30%\",\r\n    callback: () => {\r\n      ab.damage = ab.damage + 1;\r\n      ab.attackCooldown = ab.attackCooldown * 1.3;\r\n    },\r\n  });\r\n\r\n  return upgrade;\r\n}\r\n","import { spawnSpider, SPIDER_STATS } from \"./enemies/spider\";\r\nimport { TURRET_STATS_AR } from \"./enemies/turretAR\";\r\nimport { TURRET_STATS_ART } from \"./enemies/turretART\";\r\nimport { TURRET_STATS_BT } from \"./enemies/turretBT\";\r\nimport { TURRET_STATS_MISS } from \"./enemies/turretMISS\";\r\nimport { createUpgradeSystem } from \"./upgradeSystem\";\r\n\r\nexport async function createGameManager(player, centerPos, radius) {\r\n  const manager = add([\r\n    timer(),\r\n    { score: 0, difficulty: 1, spawnInterval: 2, events: {} },\r\n    \"gameManager\",\r\n  ]);\r\n\r\n  manager.upgrade = await createUpgradeSystem(player, centerPos, radius);\r\n\r\n  manager.addScore = (amount) => {\r\n    manager.score += amount;\r\n    updateDifficulty();\r\n\r\n    emit(\"scoreChanged\", manager.score);\r\n  };\r\n\r\n  function updateDifficulty() {\r\n    manager.difficulty = 1 + Math.floor(manager.score / 100);\r\n\r\n    manager.spawnInterval = Math.max(0.5, 3 - manager.difficulty * 0.2);\r\n  }\r\n\r\n  function spawnEnemy() {\r\n    const enemyType = chooseEnemyType();\r\n    const pos = randomPosInCircle(centerPos, radius);\r\n\r\n    if (enemyType === \"spider\") {\r\n      spawnSpider(pos, centerPos, radius, {\r\n        speed: SPIDER_STATS.speed + manager.difficulty * 5,\r\n      });\r\n    }\r\n\r\n    if (enemyType === \"turretAR\") {\r\n      const spawner = get(\"sTurretAR\")[0];\r\n      spawner.spawn(pos, {\r\n        bulletCount: spawner.bulletCount + manager.difficulty / 3,\r\n        bulletSpeed: spawner.bulletSpeed + manager.difficulty,\r\n        bulletSize: spawner.bulletSize + manager.difficulty / 4,\r\n      });\r\n    }\r\n\r\n    if (enemyType === \"turretART\") {\r\n      const spawner = get(\"sTurretART\")[0];\r\n      spawner.spawn(pos, {\r\n        bulletCount: spawner.bulletCount + manager.difficulty / 3,\r\n        bulletSpeed: spawner.bulletSpeed + manager.difficulty,\r\n        bulletSize: spawner.bulletSize + manager.difficulty / 5,\r\n      });\r\n    }\r\n\r\n    if (enemyType === \"turretBT\") {\r\n      const spawner = get(\"sTurretBT\")[0];\r\n      spawner.spawn(pos, randomPosInCircle(centerPos, radius), {\r\n        bulletCount: spawner.bulletCount + manager.difficulty / 3,\r\n        bulletSpeed: spawner.bulletSpeed + manager.difficulty,\r\n        bulletSize: spawner.bulletSize + manager.difficulty / 4,\r\n      });\r\n    }\r\n\r\n    if (enemyType === \"turretMISS\") {\r\n      const spawner = get(\"sTurretMISS\")[0];\r\n      spawner.spawn(pos, {\r\n        shootTimes: spawner.shootTimes + manager.difficulty / 3,\r\n        bulletSize: spawner.bulletSize + manager.difficulty / 3,\r\n      });\r\n    }\r\n  }\r\n\r\n  function chooseEnemyType() {\r\n    const weights = [0.4, 0.2, 0.2, 0.2, 0.2];\r\n    const types = [\"spider\", \"turretAR\", \"turretART\", \"turretBT\", \"turretMISS\"];\r\n\r\n    const total = weights.reduce((a, b) => a + b, 0);\r\n    const r = Math.random() * total;\r\n\r\n    let sum = 0;\r\n    for (let i = 0; i < types.length; i++) {\r\n      sum += weights[i];\r\n      if (r <= sum) return types[i];\r\n    }\r\n\r\n    return types[0];\r\n  }\r\n\r\n  function randomPosInCircle(centerPos, radius) {\r\n    let pos;\r\n    let tries = 0;\r\n    do {\r\n      const angle = Math.random() * Math.PI * 2;\r\n      const distance = Math.sqrt(Math.random()) * radius;\r\n      pos = vec2(\r\n        centerPos.x + Math.cos(angle) * distance,\r\n        centerPos.y + Math.sin(angle) * distance\r\n      );\r\n      tries++;\r\n      if (tries > 100) break;\r\n    } while (pos.dist(player.pos) < 150);\r\n\r\n    return pos;\r\n  }\r\n\r\n  function emit(eventName, data) {\r\n    const listeners = manager.events[eventName];\r\n    if (!listeners) return;\r\n    listeners.forEach((cb) => cb(data));\r\n  }\r\n\r\n  manager.onScoreChange = (callback) => {\r\n    if (!manager.events[\"scoreChanged\"]) manager.events[\"scoreChanged\"] = [];\r\n    manager.events[\"scoreChanged\"].push(callback);\r\n  };\r\n\r\n  const t = manager.loop(manager.spawnInterval, spawnEnemy);\r\n\r\n  let lastUpgradePoints = 0;\r\n  let lastTurretBoostPoints = 0;\r\n\r\n  function checkScoreTriggers(currentScore) {\r\n    if (currentScore - lastUpgradePoints >= 300) {\r\n      lastUpgradePoints += 300;\r\n      manager.upgrade.openUpgradeWindow(t);\r\n      t.paused = true;\r\n      get(\"enemy\").map((enemy) => {\r\n        destroy(enemy);\r\n      });\r\n      get(\"bullet\").map((enemy) => {\r\n        destroy(enemy);\r\n      });\r\n    }\r\n\r\n    if (currentScore - lastTurretBoostPoints >= 500) {\r\n      lastTurretBoostPoints += 500;\r\n      boostRandomTurretHP();\r\n    }\r\n  }\r\n\r\n  function boostRandomTurretHP() {\r\n    const turrets = [\"turretAR\", \"turretART\", \"turretBT\", \"turretMISS\"];\r\n    if (turrets.length === 0) return;\r\n\r\n    const turret = turrets[Math.floor(Math.random() * turrets.length)];\r\n\r\n    if (turret == \"turretAR\") {\r\n      TURRET_STATS_AR.hp = TURRET_STATS_AR.hp + 1;\r\n    }\r\n    if (turret == \"turretBT\") {\r\n      TURRET_STATS_BT.hp = TURRET_STATS_BT.hp + 1;\r\n    }\r\n    if (turret == \"turretART\") {\r\n      TURRET_STATS_ART.hp = TURRET_STATS_ART.hp + 1;\r\n    }\r\n    if (turret == \"turretMISS\") {\r\n      TURRET_STATS_MISS.hp = TURRET_STATS_ART.hp + 1;\r\n    }\r\n  }\r\n\r\n  manager.onScoreChange(() => {\r\n    checkScoreTriggers(manager.score);\r\n  });\r\n\r\n  return manager;\r\n}\r\n","import { COLORS } from \"../config\";\r\n\r\nconst Cursor = {\r\n  c: null,\r\n\r\n  async init() {\r\n    await loadSprite(\"crosshair\", \"./sprites/crosshair.png\");\r\n\r\n    this.c = add([\r\n      sprite(\"crosshair\"),\r\n      pos(center()),\r\n      color(COLORS.foreground),\r\n      anchor(\"center\"),\r\n      \"cursor\",\r\n    ]);\r\n\r\n    this.c.use(\r\n      shader(\"newTint\", () => ({\r\n        r: COLORS.foreground.at(0) / 255,\r\n        g: COLORS.foreground.at(1) / 255,\r\n        b: COLORS.foreground.at(2) / 255,\r\n      }))\r\n    );\r\n\r\n    setCursor(\"none\");\r\n\r\n    const self = this;\r\n    onUpdate(() => {\r\n      if (this.c) {\r\n        this.c.pos = mousePos();\r\n      }\r\n    });\r\n  },\r\n\r\n  getCursorPos() {\r\n    return this.c ? this.c.pos : null;\r\n  },\r\n};\r\n\r\nexport default Cursor;\r\n","import { COLORS } from \"../../../config\";\r\nimport Cursor from \"../../mouse\";\r\n\r\nconst ATTACK_COOLDOWN = 1.5;\r\nconst ATTACK_SPAWN_RADIUS = 40;\r\n\r\nexport async function initAttackAbility(player) {\r\n  const attackAbility = add([\r\n    pos(64, height() - 64),\r\n    sprite(\"axe\"),\r\n    scale(1),\r\n    color(COLORS.foreground),\r\n    anchor(\"center\"),\r\n    shader(),\r\n    animate(),\r\n    timer(),\r\n  ]);\r\n\r\n  attackAbility.canAttack = true;\r\n  attackAbility.attackCooldown = ATTACK_COOLDOWN;\r\n  attackAbility.cooldown = 0;\r\n\r\n  attackAbility.use(\r\n    shader(\"cooldown\", () => ({\r\n      r: player.color.r / 255,\r\n      g: player.color.g / 255,\r\n      b: player.color.b / 255,\r\n      h: 64 * (attackAbility.cooldown / attackAbility.attackCooldown),\r\n      texSize: vec2(2048, 2048),\r\n    }))\r\n  );\r\n\r\n  attackAbility.damage = 1;\r\n  attackAbility.maxDist = 150;\r\n  attackAbility.speed = 800;\r\n\r\n  let hasAttacked = false;\r\n  let newDist = null;\r\n  let newDir = null;\r\n\r\n  attackAbility.getCanAttack = () => {\r\n    return attackAbility.canAttack;\r\n  };\r\n\r\n  attackAbility.animate(\"scale\", [vec2(1, 1), vec2(1.2, 1.2), vec2(1, 1)], {\r\n    duration: 0.2,\r\n    direction: \"ping-pong\",\r\n    loops: 1,\r\n  });\r\n\r\n  attackAbility.Attack = () => {\r\n    if (!attackAbility.canAttack) return;\r\n    if (hasAttacked == true) return;\r\n\r\n    attackAbility.scale = vec2(1, 1);\r\n\r\n    hasAttacked = true;\r\n    attackAbility.cooldown = attackAbility.attackCooldown;\r\n    const t = attackAbility.loop(0.05, () => {\r\n      if (attackAbility.cooldown <= 0) {\r\n        hasAttacked = false;\r\n        attackAbility.cooldown = 0;\r\n        attackAbility.animation.seek(0);\r\n        t.cancel();\r\n        return;\r\n      }\r\n\r\n      attackAbility.cooldown = attackAbility.cooldown - 0.05;\r\n    });\r\n\r\n    newDir = attackAbility.getAttackDir();\r\n    newDist = attackAbility.getAttackPos();\r\n  };\r\n\r\n  attackAbility.getAttackDir = () => {\r\n    const playerPos = player.pos;\r\n    const mousePos = Cursor.getCursorPos();\r\n    return mousePos.sub(playerPos).unit();\r\n  };\r\n\r\n  attackAbility.getAttackPos = () => {\r\n    return vec2(\r\n      player.pos.x + newDir.x * attackAbility.maxDist,\r\n      player.pos.y + newDir.y * attackAbility.maxDist\r\n    );\r\n  };\r\n\r\n  onMousePress(\"left\", () => {\r\n    attackAbility.Attack();\r\n  });\r\n\r\n  attackAbility.onUpdate(() => {\r\n    if (newDist != null) {\r\n      player.setInv(true);\r\n      player.canMove = false;\r\n      player.moveTo(newDist, attackAbility.speed);\r\n\r\n      if (player.getCollisions()[0]) {\r\n        const objs = player.getCollisions();\r\n\r\n        objs.map((obj) => {\r\n          if (obj.target.tags.includes(\"enemy\")) {\r\n            if (!obj.target.hurt) return;\r\n            newDist = null;\r\n            player.canMove = true;\r\n\r\n            obj.target.hurt();\r\n\r\n            return;\r\n          }\r\n        });\r\n      }\r\n\r\n      player.setInvTime(0.1);\r\n\r\n      if (\r\n        newDist != null &&\r\n        newDist.x.toFixed(0) == player.pos.x.toFixed(0) &&\r\n        newDist.y.toFixed(0) == player.pos.y.toFixed(0)\r\n      ) {\r\n        newDist = null;\r\n        player.canMove = true;\r\n\r\n        // const attackObj = add([\r\n        //   circle(8),\r\n        //   pos(\r\n        //     player.pos.x + newDir.x * ATTACK_SPAWN_RADIUS,\r\n        //     player.pos.y + newDir.y * ATTACK_SPAWN_RADIUS\r\n        //   ),\r\n        //   color(COLORS.foreground),\r\n        //   area(),\r\n        //   anchor(\"center\"),\r\n        //   timer(),\r\n        //   \"playerAttack\",\r\n        // ]);\r\n\r\n        // attackObj.wait(1, () => {\r\n        //   destroy(attackObj);\r\n        // });\r\n      }\r\n    }\r\n  });\r\n\r\n  return attackAbility;\r\n}\r\n","import App from \"../../../app\";\r\nimport { COLORS } from \"../../../config\";\r\nimport Cursor from \"../../mouse\";\r\n\r\nexport const HOOK_STATS = { hookCooldown: 5 };\r\n\r\nexport async function initHookAbility(player) {\r\n  const rope = add([\r\n    pos(width() - 64, height() - 64),\r\n    sprite(\"hook\"),\r\n    color(COLORS.foreground),\r\n    anchor(\"center\"),\r\n    animate(),\r\n    timer(),\r\n  ]);\r\n\r\n  rope.hookCooldown = HOOK_STATS.hookCooldown;\r\n  rope.currentCooldown = 0;\r\n\r\n  rope.use(\r\n    shader(\"cooldown\", () => ({\r\n      r: player.color.r / 255,\r\n      g: player.color.g / 255,\r\n      b: player.color.b / 255,\r\n      h: 64 * (rope.currentCooldown / rope.hookCooldown),\r\n      texSize: vec2(2048, 2048),\r\n    }))\r\n  );\r\n\r\n  rope.ab = await player.attackAbility;\r\n  rope.endPos = null;\r\n  rope.isRopeActive = false;\r\n  rope.canUseHook = true;\r\n  rope.DrawRope = async () => {\r\n    drawLine({\r\n      p1: player.pos,\r\n      p2: rope.endPos,\r\n      width: 4,\r\n      color: rgb(COLORS.foreground),\r\n    });\r\n  };\r\n\r\n  rope.calcEndPos = async () => {\r\n    const data = await App.getCurrentSceneData();\r\n    const playerPos = player.pos;\r\n    const mousePos = Cursor.getCursorPos();\r\n    const center = data.centerPos;\r\n    const radius = data.radius;\r\n\r\n    const res = raycast(player.pos, mousePos.sub(playerPos).unit().scale(800), [\r\n      \"player\",\r\n      \"bullet\",\r\n      \"solid\",\r\n    ]);\r\n\r\n    if (res && res.object.tags.includes(\"enemy\")) {\r\n      rope.endPos = res.object.pos;\r\n      // TODO: FIX ERROR WHEN PLAYER HOOKS TO BUTTON\r\n      // TODO: make another var for hook.damage\r\n      res.object.hurt(player.damage);\r\n      return;\r\n    }\r\n\r\n    const dir = mousePos.sub(playerPos);\r\n\r\n    const toCenter = playerPos.sub(center);\r\n    const a = dir.dot(dir);\r\n    const b = 2 * toCenter.dot(dir);\r\n    const c = toCenter.dot(toCenter) - radius * radius;\r\n    const discriminant = b * b - 4 * a * c;\r\n\r\n    let endPos;\r\n    if (discriminant < 0) {\r\n      endPos = mousePos;\r\n    } else {\r\n      const t1 = (-b + Math.sqrt(discriminant)) / (2 * a);\r\n      const t2 = (-b - Math.sqrt(discriminant)) / (2 * a);\r\n      const t = Math.max(t1, t2, 0);\r\n      endPos = playerPos.add(dir.scale(t));\r\n    }\r\n\r\n    rope.endPos = endPos;\r\n  };\r\n\r\n  rope.onUpdate(() => {\r\n    if (rope.isRopeActive && rope.endPos != null) {\r\n      rope.DrawRope();\r\n\r\n      if (rope.endPos != null) {\r\n        player.setInv(true);\r\n        player.canMove = false;\r\n        player.moveTo(rope.endPos, 1500);\r\n      }\r\n\r\n      if (\r\n        (rope.endPos != null && player.pos.dist(rope.endPos) < 40) ||\r\n        !rope.isRopeActive\r\n      ) {\r\n        rope.isRopeActive = false;\r\n        rope.endPos = null;\r\n\r\n        rope.ab.canAttack = true;\r\n        player.canMove = true;\r\n        player.setInvTime(0.1);\r\n      }\r\n    }\r\n  });\r\n\r\n  rope.animate(\"scale\", [vec2(1, 1), vec2(1.2, 1.2), vec2(1, 1)], {\r\n    duration: 0.2,\r\n    direction: \"ping-pong\",\r\n    loops: 1,\r\n  });\r\n\r\n  onMousePress(\"right\", async () => {\r\n    if (rope.isRopeActive || !rope.canUseHook) return;\r\n\r\n    rope.canUseHook = false;\r\n    rope.currentCooldown = rope.hookCooldown;\r\n    const t = rope.loop(0.1, () => {\r\n      if (rope.currentCooldown <= 0) {\r\n        rope.canUseHook = true;\r\n        rope.currentCooldown = 0;\r\n        rope.animation.seek(0);\r\n        t.cancel();\r\n        return;\r\n      }\r\n\r\n      rope.currentCooldown = rope.currentCooldown - 0.1;\r\n    });\r\n\r\n    rope.ab.canAttack = false;\r\n    rope.calcEndPos();\r\n    rope.isRopeActive = true;\r\n  });\r\n\r\n  onMousePress(\"left\", async () => {\r\n    if (!rope.isRopeActive) return;\r\n\r\n    rope.isRopeActive = false;\r\n    rope.endPos = null;\r\n    player.canMove = true;\r\n    player.setInv(false);\r\n    rope.ab.canAttack = true;\r\n  });\r\n\r\n  return rope;\r\n}\r\n","import App from \"../../app\";\r\nimport { COLORS, DEF_COLORS, setForegroundColor } from \"../../config\";\r\nimport { initAttackAbility } from \"./abilities/attack\";\r\nimport { initHookAbility } from \"./abilities/hook\";\r\n\r\nconst MAX_HEALTH = 5;\r\nconst SPEED = 300;\r\nconst INV_AFTER_HURT = 0.3;\r\n\r\nexport const spawnPlayer = async (position) => {\r\n  let frames = vec2(8, 3);\r\n  let canTakeDamage = true;\r\n  let canTakeBulletDamage = true;\r\n\r\n  loadSprite(\"hero\", \"./sprites/all.png\", {\r\n    sliceX: frames.x,\r\n    sliceY: frames.y,\r\n    anims: {\r\n      afk: 0,\r\n      idle: { from: 0, to: 7, loop: true },\r\n      walk: { from: 8, to: 14, loop: true },\r\n    },\r\n  });\r\n\r\n  const playerSprite = await getSprite(\"hero\");\r\n\r\n  const player = add([\r\n    sprite(playerSprite),\r\n    health(MAX_HEALTH, MAX_HEALTH),\r\n    pos(position),\r\n    color(COLORS.foreground),\r\n    area({\r\n      shape: new Polygon([\r\n        vec2(-18, 12),\r\n        vec2(10, 12),\r\n        vec2(10, -20),\r\n        vec2(-18, -20),\r\n      ]),\r\n    }),\r\n    body(),\r\n    anchor(vec2(0.2, 0.5)),\r\n    timer(),\r\n    {\r\n      maxHeath: MAX_HEALTH,\r\n      health: MAX_HEALTH,\r\n      speed: SPEED,\r\n      invAfterHurt: INV_AFTER_HURT,\r\n    },\r\n    \"player\",\r\n  ]);\r\n\r\n  player.use(\r\n    shader(\"playerShader\", () => ({\r\n      r: player.color.r / 255,\r\n      g: player.color.g / 255,\r\n      b: player.color.b / 255,\r\n      h: 596 + (1 - player.hp() / player.maxHP()) * 1452,\r\n      texSize: vec2(playerSprite.tex.width, playerSprite.tex.height),\r\n      frameOffset: vec2(\r\n        playerSprite.frames[player.frame].x,\r\n        playerSprite.frames[player.frame].y\r\n      ),\r\n      frameSize: vec2(\r\n        playerSprite.frames[player.frame].w,\r\n        playerSprite.frames[player.frame].h\r\n      ),\r\n    }))\r\n  );\r\n\r\n  // Player variables\r\n  player.canMove = true;\r\n  player.isMoving = false;\r\n\r\n  // Player movement\r\n  const keyMap = {\r\n    KeyW: \"up\",\r\n    KeyA: \"left\",\r\n    KeyS: \"down\",\r\n    KeyD: \"right\",\r\n  };\r\n\r\n  const pressed = {};\r\n\r\n  document.addEventListener(\"keydown\", (e) => {\r\n    const action = keyMap[e.code];\r\n    if (action) pressed[action] = true;\r\n  });\r\n\r\n  document.addEventListener(\"keyup\", (e) => {\r\n    const action = keyMap[e.code];\r\n    if (action) pressed[action] = false;\r\n  });\r\n\r\n  function isActionDown(action) {\r\n    return !!pressed[action];\r\n  }\r\n\r\n  const moveHandler = () => {\r\n    if (!player.canMove) return;\r\n\r\n    let dirX = 0;\r\n    let dirY = 0;\r\n\r\n    if (isActionDown(\"left\")) dirX -= 1;\r\n    if (isActionDown(\"right\")) dirX += 1;\r\n    if (isActionDown(\"up\")) dirY -= 1;\r\n    if (isActionDown(\"down\")) dirY += 1;\r\n\r\n    let dir = vec2(dirX, dirY);\r\n    if (dir.len() > 0) {\r\n      dir = dir.unit();\r\n      player.lastDirection = dir;\r\n      player.move(dir.x * player.speed, dir.y * player.speed);\r\n      player.flipX = dir.x < 0;\r\n    }\r\n  };\r\n\r\n  // Abilities\r\n  player.attackAbility = initAttackAbility(player);\r\n  player.hookAbility = initHookAbility(player);\r\n  // const attachAbility = initAttachAbility(player, JUMP_FORCE);\r\n\r\n  // Physics\r\n  player.onUpdate(() => {\r\n    moveHandler();\r\n\r\n    if (\r\n      (isActionDown(\"left\") ||\r\n        isActionDown(\"right\") ||\r\n        isActionDown(\"up\") ||\r\n        isActionDown(\"down\")) &&\r\n      player.canMove\r\n    ) {\r\n      player.isMoving = true;\r\n      if (player.curAnim() == \"walk\") return;\r\n\r\n      player.play(\"walk\");\r\n    } else {\r\n      player.isMoving = false;\r\n      if (player.curAnim() == \"idle\") return;\r\n\r\n      player.play(\"afk\");\r\n    }\r\n  });\r\n\r\n  // Damage\r\n  player.hurt = (amount) => {\r\n    if (!canTakeDamage) return;\r\n\r\n    player.setInvTime(INV_AFTER_HURT);\r\n\r\n    player.setHP(player.hp() - amount);\r\n    player.trigger(\"hurt\");\r\n  };\r\n\r\n  player.setInvTime = (seconds) => {\r\n    canTakeDamage = false;\r\n    player.wait(seconds, () => {\r\n      canTakeDamage = true;\r\n    });\r\n  };\r\n\r\n  player.setInv = (bool) => {\r\n    canTakeDamage = !bool;\r\n  };\r\n\r\n  player.setInvBulletTime = (seconds) => {\r\n    canTakeBulletDamage = false;\r\n    player.wait(seconds, () => {\r\n      canTakeBulletDamage = true;\r\n    });\r\n  };\r\n\r\n  player.setInvBullet = (bool) => {\r\n    canTakeBulletDamage = !bool;\r\n  };\r\n\r\n  player.onHurt(() => {\r\n    if (player.hp() <= 0) return;\r\n\r\n    shake(4);\r\n\r\n    setForegroundColor([156, 23, 59]);\r\n\r\n    player.wait(0.3, () => {\r\n      setForegroundColor(DEF_COLORS.foreground);\r\n    });\r\n  });\r\n\r\n  // Death\r\n  player.onDeath(() => {\r\n    App.startScene(\"death\");\r\n  });\r\n\r\n  // TODO: for testing, delete it later\r\n  onKeyPress(\"space\", async () => {\r\n    let allBullet = get(\"bullet\");\r\n\r\n    allBullet.map((obj) => {\r\n      obj.radius = obj.radius * 3;\r\n    });\r\n  });\r\n\r\n  return player;\r\n};\r\n","import { COLORS, DEF_COLORS, setForegroundColor } from \"../config\";\r\nimport { loadSpider, setupSpiderLogic } from \"../objects/enemies/spider\";\r\nimport {\r\n  createTurretSpawnerAR,\r\n  setupBulletLogic,\r\n} from \"../objects/enemies/turretAR\";\r\nimport {\r\n  createTurretSpawnerART,\r\n  setupExplosionDamageLogic,\r\n} from \"../objects/enemies/turretART\";\r\nimport { createTurretSpawnerBT } from \"../objects/enemies/turretBT\";\r\nimport { createTurretSpawnerMISS } from \"../objects/enemies/turretMISS\";\r\nimport { createGameManager } from \"../objects/gameManager\";\r\nimport Cursor from \"../objects/mouse\";\r\nimport { spawnPlayer } from \"../objects/player/player\";\r\n\r\nexport const test_scene = async () => {\r\n  setForegroundColor(DEF_COLORS.foreground);\r\n  await Cursor.init();\r\n  const PLAYER_START_POS = vec2(center().x, center().y * 1.7);\r\n\r\n  const player = await spawnPlayer(PLAYER_START_POS);\r\n\r\n  const centerPos = vec2(width() / 2, height() / 2);\r\n  const radius = width() / 2 - 16;\r\n  const halfRadiusPlayerModel = 36;\r\n\r\n  add([\r\n    pos(centerPos),\r\n    circle(radius, { fill: false }),\r\n    outline(2, Color.fromArray(COLORS.foreground)),\r\n    \"border\",\r\n  ]);\r\n\r\n  player.onUpdate(() => {\r\n    const distFromCenter = player.pos.dist(centerPos);\r\n    if (distFromCenter > radius - halfRadiusPlayerModel) {\r\n      const dir = player.pos.sub(centerPos).unit();\r\n      player.pos = centerPos.add(dir.scale(radius - halfRadiusPlayerModel));\r\n    }\r\n  });\r\n\r\n  setupBulletLogic((bullet) => {\r\n    const distFromCenter = bullet.pos.dist(centerPos);\r\n    if (distFromCenter > radius - bullet.radius) {\r\n      destroy(bullet);\r\n    }\r\n  });\r\n\r\n  setupExplosionDamageLogic();\r\n\r\n  await loadSpider();\r\n  setupSpiderLogic();\r\n\r\n  createTurretSpawnerAR();\r\n  createTurretSpawnerART();\r\n  createTurretSpawnerBT();\r\n  createTurretSpawnerMISS();\r\n  const gameManager = await createGameManager(player, centerPos, radius);\r\n\r\n  const scoreText = add([\r\n    text(get(\"gameManager\")[0].score, { font: \"Tiny\" }),\r\n    pos(20, 20),\r\n    layer(\"ui\"),\r\n    color(COLORS.foreground),\r\n  ]);\r\n\r\n  gameManager.onScoreChange(() => {\r\n    scoreText.text = gameManager.score;\r\n  });\r\n\r\n  return { centerPos, radius };\r\n};\r\n","import App from \"../app\";\r\nimport { COLORS } from \"../config\";\r\n\r\nexport const death_scene = async (nextScene) => {\r\n  const centerPos = vec2(width() / 2, height() / 2);\r\n  const radius = width() / 2 - 16;\r\n\r\n  add([\r\n    pos(centerPos),\r\n    circle(radius, { fill: false }),\r\n    outline(2, Color.fromArray(COLORS.foreground)),\r\n  ]);\r\n\r\n  const scoreText = add([\r\n    text(\"You are dead!\\nPress space to restart\", {\r\n      font: \"Tiny\",\r\n      align: \"center\",\r\n    }),\r\n    color(COLORS.foreground),\r\n    pos(center()),\r\n    anchor(\"center\"),\r\n    layer(\"ui\"),\r\n    animate(),\r\n  ]);\r\n\r\n  onKeyPress(\"space\", () => {\r\n    App.startScene(\"test\");\r\n  });\r\n\r\n  scoreText.animate(\"scale\", [0, 1], {\r\n    duration: 0.5,\r\n    loops: 1,\r\n  });\r\n\r\n  return nextScene;\r\n};\r\n","export function initShaders() {\r\n  loadSprite(\"axe\", \"./sprites/axe.png\");\r\n  loadSprite(\"hook\", \"./sprites/hook.png\");\r\n\r\n  loadShader(\r\n    \"playerShader\",\r\n    null,\r\n    `\r\n  precision mediump float;\r\n\r\n  uniform float r;\r\n  uniform float g;\r\n  uniform float b;\r\n  uniform float h;\r\n  uniform vec2 texSize;\r\n  uniform vec2 frameOffset;\r\n  uniform vec2 frameSize;\r\n\r\n  vec4 frag(vec2 pos, vec2 uv, vec4 color, sampler2D tex) {\r\n      vec4 c = texture2D(tex, uv);\r\n\r\n      if (c.a < 0.01) {\r\n          return c;\r\n      }\r\n\r\n      vec2 offsetX = vec2(1.0 / texSize.x, 0.0);\r\n      vec2 offsetY = vec2(0.0, 1.0 / texSize.y);\r\n\r\n      float alphaUp    = texture2D(tex, uv + offsetY).a;\r\n      float alphaDown  = texture2D(tex, uv - offsetY).a;\r\n      float alphaLeft  = texture2D(tex, uv - offsetX).a;\r\n      float alphaRight = texture2D(tex, uv + offsetX).a;\r\n\r\n      if (alphaUp < 0.01 || alphaDown < 0.01 || alphaLeft < 0.01 || alphaRight < 0.01) {\r\n          return vec4(r, g, b, c.a);\r\n      }\r\n\r\n      vec2 pixelCoord = uv * texSize;\r\n      vec2 localPixel = pixelCoord - (frameOffset * texSize);\r\n      vec2 localUV = localPixel / frameSize; // 0..1 по фрейму\r\n\r\n      if (localUV.y <= h) {\r\n          return vec4(1.0, 0.0, 0.0, 0.0);\r\n      }\r\n\r\n      return vec4(r, g, b, c.a);\r\n      }\r\n      `\r\n  );\r\n\r\n  loadShader(\r\n    \"cooldown\",\r\n    null,\r\n    `\r\n  precision mediump float;\r\n\r\n    uniform float r;\r\n  uniform float g;\r\n  uniform float b;\r\n  uniform float h;\r\n  uniform vec2 texSize;\r\n\r\n  vec4 frag(vec2 pos, vec2 uv, vec4 color, sampler2D tex) {\r\n      vec4 c = texture2D(tex, uv);\r\n\r\n      if (c.a < 0.01) {\r\n          return c;\r\n      }\r\n\r\n      vec2 offsetX = vec2(1.0 / texSize.x, 0.0);\r\n      vec2 offsetY = vec2(0.0, 1.0 / texSize.y);\r\n\r\n      float alphaUp    = texture2D(tex, uv + offsetY).a;\r\n      float alphaDown  = texture2D(tex, uv - offsetY).a;\r\n      float alphaLeft  = texture2D(tex, uv - offsetX).a;\r\n      float alphaRight = texture2D(tex, uv + offsetX).a;\r\n\r\n      if (alphaUp < 0.01 || alphaDown < 0.01 || alphaLeft < 0.01 || alphaRight < 0.01) {\r\n          return vec4(r, g, b, c.a);\r\n      }\r\n\r\n      vec2 pixelCoord = uv * texSize;\r\n\r\n      if (pixelCoord.y <= h) {\r\n          return vec4(c.r, c.g, c.b, 0.0);\r\n      }\r\n\r\n      return vec4(r, g, b, c.a);\r\n      }\r\n      `\r\n  );\r\n\r\n  loadShader(\r\n    \"newTint\",\r\n    null,\r\n    `\r\n    precision mediump float;\r\n\r\n    uniform float r;\r\n    uniform float g;\r\n    uniform float b;\r\n\r\n    vec4 frag(vec2 pos, vec2 uv, vec4 color, sampler2D tex) {\r\n      vec4 c = def_frag();\r\n\r\n      return vec4(r, g, b, c.a);\r\n    }\r\n    `\r\n  );\r\n\r\n  loadShader(\r\n    \"hollow\",\r\n    null,\r\n    `\r\n  precision mediump float;\r\n\r\n  uniform float r;\r\n  uniform float g;\r\n  uniform float b;\r\n  uniform vec2 texSize;\r\n\r\n  vec4 frag(vec2 pos, vec2 uv, vec4 color, sampler2D tex) {\r\n    vec4 c = texture2D(tex, uv);\r\n\r\n    if (c.a < 0.1) {\r\n        return c;\r\n    }\r\n\r\n    vec2 offsetX = vec2(1.0 / texSize.x, 0.0);\r\n    vec2 offsetY = vec2(0.0, 1.0 / texSize.y);\r\n\r\n    float alphaUp    = texture2D(tex, uv + offsetY).a;\r\n    float alphaDown  = texture2D(tex, uv - offsetY).a;\r\n    float alphaLeft  = texture2D(tex, uv - offsetX).a;\r\n    float alphaRight = texture2D(tex, uv + offsetX).a;\r\n\r\n    if (alphaUp < 0.01 || alphaDown < 0.01 || alphaLeft < 0.01 || alphaRight < 0.01) {\r\n        return vec4(r, g, b, c.a);\r\n    }\r\n\r\n    return vec4(0,0,0,0);\r\n  }\r\n  `\r\n  );\r\n}\r\n","import kaplay from \"kaplay\";\r\nimport { fullscreenHandler } from \"./utils/fullscreen\";\r\nimport { GAME_WIDTH, GAME_HEIGHT, COLORS } from \"./config.js\";\r\n\r\nimport App from \"./app.js\";\r\nimport { test_scene } from \"./scenes/testing_scene.js\";\r\nimport { death_scene } from \"./scenes/death.scene.js\";\r\nimport { initShaders } from \"./utils/shaders.js\";\r\nimport { loadTurret } from \"./objects/enemies/turretAR.js\";\r\n\r\nconst k = kaplay({\r\n  background: [COLORS.background],\r\n  width: GAME_WIDTH,\r\n  height: GAME_HEIGHT,\r\n  scale: 1,\r\n  pixelated: true,\r\n});\r\n\r\nfullscreenHandler(k);\r\n\r\nloadFont(\"Tiny\", \"./fonts/Tiny5-Regular.ttf\");\r\ninitShaders();\r\nawait loadTurret();\r\n\r\nApp.init(k);\r\n\r\nApp.addScene(\"test\", test_scene);\r\nApp.addScene(\"death\", death_scene);\r\nApp.startScene(\"test\");\r\n","import { COLORS } from \"../config\";\r\n\r\nconst body = document.querySelector(\"body\");\r\n\r\nbody.style.backgroundColor = rgb(COLORS.background);\r\n"],"names":["resizeGame","kaplay","gameCanvas","winWidth","winHeight","scaleX","scaleY","scale","goFullscreen","canvas","fullscreenHandler","GAME_WIDTH","GAME_HEIGHT","DEF_COLORS","COLORS","setForegroundColor","newColor","obj","App","kaplayInstance","name","sceneFunc","data","loadSpider","SPIDER_STATS","spawnSpider","position","centerPos","radius","options","size","speed","moveInterval","damage","aggroRange","travelRange","hp","deathPartsCount","deathPartsSpeed","deathPartsLife","deathShake","deathScore","dist","spider","newDist","player","distance","getRandomDist","moveHandler","death","setupSpiderLogic","loadTurret","TURRET_STATS_AR","createTurretSpawnerAR","defaults","spawnerDefaults","bulletCount","bulletSpeed","shootInterval","bulletSize","turret","shootCircle","i","angle","dir","shootLoop","setupBulletLogic","destroyBulletFunc","b","bullet","TURRET_STATS_ART","createTurretSpawnerART","dropTime","explosionSize","shoot","dropPos","missleArea","explosion","setupExplosionDamageLogic","TURRET_STATS_BT","createTurretSpawnerBT","buttonPosition","button","spread","count","startAngle","step","rotatedDir","TURRET_STATS_MISS","createTurretSpawnerMISS","shootTimes","shootIntervalShort","shootIntervalLong","j","createUpgradeSystem","defIcon","upgrade","hb","ab","t","f1","f2","x","y","p","u","createGameManager","manager","amount","updateDifficulty","emit","spawnEnemy","enemyType","chooseEnemyType","pos","randomPosInCircle","spawner","weights","types","total","a","r","sum","tries","eventName","listeners","cb","callback","lastUpgradePoints","lastTurretBoostPoints","checkScoreTriggers","currentScore","enemy","boostRandomTurretHP","turrets","Cursor","ATTACK_COOLDOWN","initAttackAbility","attackAbility","hasAttacked","newDir","playerPos","HOOK_STATS","initHookAbility","rope","mousePos","center","res","toCenter","c","discriminant","endPos","t1","t2","MAX_HEALTH","SPEED","INV_AFTER_HURT","spawnPlayer","frames","canTakeDamage","playerSprite","keyMap","pressed","e","action","isActionDown","dirX","dirY","seconds","bool","test_scene","PLAYER_START_POS","halfRadiusPlayerModel","gameManager","scoreText","death_scene","nextScene","initShaders","k","body"],"mappings":"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"}